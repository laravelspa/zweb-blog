[{"content":"This system is the biggest thing I have worked on, but I did not finish it because I moved from using Vuetify to the Quasar framework because Vuetify did not support version 3 of Vue at that time. Currently, I am porting the system and using clean code, and I can then develop it.\nLogin # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Dashboard # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Users # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Suppliers # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Customers # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Leads # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Teams # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Products # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Purchases # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Purchase Returns # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Sales # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Sale Returns # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Quotations # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Adjustments # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Transfers # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Categories # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Brands # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Currencies # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Units # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Warehouses # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Expenses # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Expense Categories # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Roles # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Settings # CRM Laravel \u0026amp; Vue 2 Stages # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Pipelines # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Reasonss # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Sources # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Campaigns # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Delegates # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Companies # CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 CRM Laravel \u0026amp; Vue 2 Requirements # PHP 7.4 Node 16.20 Tools # Materio Vuetify Vue Dashboard Languages # PHP (Programming Language) HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Backendend Framework # Laravel 8 Frontend Framework # Vue 2 Vuetify PHP Packages # Laravel Sanctum Laravel maatwebsite/excel Laravel spatie/laravel-medialibra Javascript Library # vue-i18n vue-router vuex vuedraggable axios apexcharts jspdf vue-filepond vue-filepond @growthbunker/vueflags @growthbunker/vueflags @timbouc/vuetify-country-region-input Icon Library # mdi icons ","date":"10 November 2023","permalink":"/portfolio/crm-laravel-vue2-fullstack-project/","section":"Portfolio","summary":"This system is the biggest thing I have worked on, but I did not finish it because I moved from using Vuetify to the Quasar framework because Vuetify did not support version 3 of Vue at that time.","title":"CRM Laravel \u0026 Vue 2 - Fullstack Project"},{"content":"","date":"10 November 2023","permalink":"/","section":"Laravel SPA","summary":"","title":"Laravel SPA"},{"content":"This section contains some of my projects.\n","date":"10 November 2023","permalink":"/portfolio/","section":"Portfolio","summary":"This section contains some of my projects.","title":"Portfolio"},{"content":"The Institute management system that I designed and developed with my friend Mohamed Tersawy using PHP Framework Laravel 8. with clean code.\nInstitute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Requirements # PHP 7.4 Tools # AdminLTE Dashboard Languages # PHP (Programming Language) HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Backendend Framework # Laravel Frontend Framework # Bootstrap Javascript Library # DataTables Chart JS Select2 JS SweetAlert FullCalendar Dom To Image JS Barcode JS PDF Read Excel File laravelspa/courses Blade 0 0 ","date":"9 November 2023","permalink":"/portfolio/institute-management-laravel-system-fullstack-project/","section":"Portfolio","summary":"The Institute management system that I designed and developed with my friend Mohamed Tersawy using PHP Framework Laravel 8. with clean code.\nInstitute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Institute Management Laravel System Requirements # PHP 7.","title":"Institute Management Laravel System - Fullstack Project"},{"content":"The first crm program that I designed and developed using PHP without using any framework. Of course, the program has many problems, but it served the purpose for the company that requested it and was designed based on its requirements.\nCRM PHP CRM PHP CRM PHP CRM PHP CRM PHP CRM PHP CRM PHP CRM PHP CRM PHP CRM PHP Requirements # PHP 7.4 Tools # AdminLTE Dashboard Languages # PHP (Programming Language) HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # DataTables Chart JS Select2 JS SweetAlert FullCalendar Dom To Image JS Barcode JS PDF Read Excel File laravelspa/crm-php JavaScript 0 0 ","date":"8 November 2023","permalink":"/portfolio/crm-php-fullstack-project/","section":"Portfolio","summary":"The first crm program that I designed and developed using PHP without using any framework. Of course, the program has many problems, but it served the purpose for the company that requested it and was designed based on its requirements.","title":"CRM PHP - Fullstack Project"},{"content":"A small tool created to convert excel data to pdf.\nExcel To PDF Excel To PDF Excel To PDF Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Javascript Library # Dom To Image JS Barcode JS PDF Read Excel File Demo laravelspa/Excel-To-PDF JavaScript 0 0 ","date":"7 November 2023","permalink":"/portfolio/excel-to-pdf-frontend-project/","section":"Portfolio","summary":"A small tool created to convert excel data to pdf.\nExcel To PDF Excel To PDF Excel To PDF Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Javascript Library # Dom To Image JS Barcode JS PDF Read Excel File Demo laravelspa/Excel-To-PDF JavaScript 0 0 ","title":"Excel To PDF - Frontend Project"},{"content":"A personal website theme powered by Nuxt Content, TailwindCSS, Iconify and Vue components.\nNuxt Wind Dark Theme Nuxt Wind Dark Theme Nuxt Wind Light Theme Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # TailwindCSS Javascript Library # Vue Nuxt Demo laravelspa/nuxt-wind-theme TypeScript 0 0 ","date":"6 November 2023","permalink":"/portfolio/nuxt-wind-theme-frontend-project/","section":"Portfolio","summary":"A personal website theme powered by Nuxt Content, TailwindCSS, Iconify and Vue components.\nNuxt Wind Dark Theme Nuxt Wind Dark Theme Nuxt Wind Light Theme Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # TailwindCSS Javascript Library # Vue Nuxt Demo laravelspa/nuxt-wind-theme TypeScript 0 0 ","title":"Nuxt Wind Theme - Frontend Project"},{"content":"A Simple Shop Template.\nSimple Shop Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Custom CSS Javascript Library # JQuery Icon Library # Font Awesome Demo laravelspa/Simple-Shop New Website jQuery HTML 0 0 ","date":"5 November 2023","permalink":"/portfolio/simple-shop-frontend-project/","section":"Portfolio","summary":"A Simple Shop Template.\nSimple Shop Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Custom CSS Javascript Library # JQuery Icon Library # Font Awesome Demo laravelspa/Simple-Shop New Website jQuery HTML 0 0 ","title":"Simple Shop - Frontend Project"},{"content":"An 12-section landing page created for the purpose of selling the Natural product.\nSpiru Lin Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Spiru-Lin-Landing-Page CSS 0 0 ","date":"4 November 2023","permalink":"/portfolio/spiru-lin-landing-page-frontend-project/","section":"Portfolio","summary":"An 12-section landing page created for the purpose of selling the Natural product.\nSpiru Lin Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Spiru-Lin-Landing-Page CSS 0 0 ","title":"Spiru Lin Landing Page - Frontend Project"},{"content":"An 4-section landing page created for the purpose of selling the Natural product.\nGoji Cream Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Goji-Cream-2-Landing-Page CSS 0 0 ","date":"3 November 2023","permalink":"/portfolio/goji-cream-2-landing-page-frontend-project/","section":"Portfolio","summary":"An 4-section landing page created for the purpose of selling the Natural product.\nGoji Cream Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Goji-Cream-2-Landing-Page CSS 0 0 ","title":"Goji Cream 2 Landing Page - Frontend Project"},{"content":"An 8-section landing page created for the purpose of selling the Natural products.\nWellness Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/Wellness-Landing-Page Vue 0 0 ","date":"30 October 2023","permalink":"/portfolio/wellness-landing-page-frontend-project/","section":"Portfolio","summary":"An 8-section landing page created for the purpose of selling the Natural products.\nWellness Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/Wellness-Landing-Page Vue 0 0 ","title":"Wellness Landing Page - Frontend Project"},{"content":"An 7-section landing page created for the purpose of selling the Natural product.\nGolden Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/golden-landing-page Vue 0 0 ","date":"29 October 2023","permalink":"/portfolio/golden-landing-page-frontend-project/","section":"Portfolio","summary":"An 7-section landing page created for the purpose of selling the Natural product.\nGolden Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/golden-landing-page Vue 0 0 ","title":"Golden Landing Page - Frontend Project"},{"content":"An 7-section landing page created for the purpose of selling the Natural product.\nGolden Wapp Design Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/Golden-Wapp-Design-Landing-Page Vue 0 0 ","date":"28 October 2023","permalink":"/portfolio/golden-wapp-design-landing-page-frontend-project/","section":"Portfolio","summary":"An 7-section landing page created for the purpose of selling the Natural product.\nGolden Wapp Design Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/Golden-Wapp-Design-Landing-Page Vue 0 0 ","title":"Golden Wapp Design Landing Page - Frontend Project"},{"content":"An 8-section landing page created for the purpose of selling the Natural product.\nCaviarMask Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Icon Library # Font Awesome Demo laravelspa/CaviarMask-Landing-Page CSS 0 0 ","date":"27 October 2023","permalink":"/portfolio/caviarmask-landing-page-frontend-project/","section":"Portfolio","summary":"An 8-section landing page created for the purpose of selling the Natural product.\nCaviarMask Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Icon Library # Font Awesome Demo laravelspa/CaviarMask-Landing-Page CSS 0 0 ","title":"CaviarMask Landing Page - Frontend Project"},{"content":"An 8-section landing page created for the purpose of the exercise\nunicode Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Unicode-Landing-Page Test Website JavaScript 0 0 ","date":"26 October 2023","permalink":"/portfolio/unicode-landing-page-frontend-project/","section":"Portfolio","summary":"An 8-section landing page created for the purpose of the exercise\nunicode Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Unicode-Landing-Page Test Website JavaScript 0 0 ","title":"Unicode Landing Page - Frontend Project"},{"content":"An 8-section landing page created for the purpose of the exercise\nPersonal Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Personal-Landing-Page legal justice group HTML 0 0 ","date":"25 October 2023","permalink":"/portfolio/personal-landing-page-frontend-project/","section":"Portfolio","summary":"An 8-section landing page created for the purpose of the exercise\nPersonal Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Personal-Landing-Page legal justice group HTML 0 0 ","title":"Personal Landing Page - Frontend Project"},{"content":"","date":"20 August 2023","permalink":"/blog/","section":"Blogs","summary":"","title":"Blogs"},{"content":"","date":"20 August 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"20 August 2023","permalink":"/tags/eloquent/","section":"Tags","summary":"","title":"eloquent"},{"content":" How to delete data from one-to-many relationship in Laravel? Delete data using the user form. # First go to routes/web.php file and add this route: Route::get(\u0026#39;/users/posts/delete\u0026#39;, function () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;posts()-\u0026gt;whereIn(\u0026#39;id\u0026#39;, [1, 2])-\u0026gt;delete(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.0.0.1:8000/users/posts/delete to find that the post has been deleted successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Delete data using the publication form. # First go to routes/web.php file and add this path: Route::get(\u0026#39;/posts/user/delete\u0026#39;, function () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;findOrFail(2); $post-\u0026gt;delete(); }); We open the browser and go to the new URL http://127.0.0.1:8000/posts/user/delete. We see that the post has been successfully deleted. Rcord has deleted Conclusion # This article is a continuation of the entire series on Laravel Eloquent Relationships Relationships within Laravel. We have covered one-to-many relationship in a complete manner. We have not spared any information for you, and, God willing, we will learn in the following explanation about the relationship of many to many.\nYou can find the repo of this series on github here: laravelspa/laravel-relations PHP 0 0 ","date":"20 August 2023","permalink":"/blog/how-to-delete-data-from-one-to-many-relationship-in-laravel/","section":"Blogs","summary":"How to delete data from one-to-many relationship in Laravel? Delete data using the user form. # First go to routes/web.php file and add this route: Route::get(\u0026#39;/users/posts/delete\u0026#39;, function () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;posts()-\u0026gt;whereIn(\u0026#39;id\u0026#39;, [1, 2])-\u0026gt;delete(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.","title":"How to delete data from one to many relationship in Laravel?"},{"content":"","date":"20 August 2023","permalink":"/categories/laravel/","section":"Categories","summary":"","title":"Laravel"},{"content":"","date":"20 August 2023","permalink":"/series/laravel-eloquent-relationships/","section":"Series","summary":"","title":"Laravel Eloquent Relationships"},{"content":"","date":"20 August 2023","permalink":"/categories/laravel-relationships/","section":"Categories","summary":"","title":"Laravel Relationships"},{"content":"","date":"20 August 2023","permalink":"/tags/laravel10/","section":"Tags","summary":"","title":"laravel10"},{"content":"","date":"20 August 2023","permalink":"/tags/relationships/","section":"Tags","summary":"","title":"relationships"},{"content":"","date":"20 August 2023","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"20 August 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" How to update one to many relationship in Laravel? Update data using the user form. # Using push method. First go to routes/web.php file and modify this route: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:37:30.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1\u0026#39;; $post-\u0026gt;update(); return response()-\u0026gt;json($user); ]); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:41:35.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Update data using the post form. # Using push method. First go to routes/web.php file and add this route: Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($post); }); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:50:30.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe\u0026#39;; $post-\u0026gt;update([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39; ]); return response()-\u0026gt;json($post); ]); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:55:45.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } You can find the repo of this series on github here: laravelspa/laravel-relations PHP 0 0 ","date":"19 August 2023","permalink":"/blog/how-to-update-a-one-to-many-relationship-in-laravel/","section":"Blogs","summary":"How to update one to many relationship in Laravel? Update data using the user form. # Using push method. First go to routes/web.php file and modify this route: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.","title":"How to update a one-to-many relationship in Laravel?"},{"content":" How do you retrieve data from one to many relationship in Laravel? We saw how data is saved in multiple different ways within the database using the One-To-Many relationship in Laravel. But how to fetch data from the database? There are several ways in which data can be fetched from a database. These methods are divided into two basic methods:\nThrough the user User Model # This method is divided into two sub-methods depending on how the data is organized after it is fetched from the data base\nWithout using API Resources. # We go first to the routes/web.php file so that we can test these methods and make the following modifications. use App\\Models\\User; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;, \u0026#39;posts\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); Here we can choose the columns for each relationship as follows.\nuse App\\Models\\User; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile:id,firstname,lastname,user_id\u0026#39;, \u0026#39;posts:title,user_id\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); In order to know the difference between selecting or not selecting columns from the database, let us see the specific response to each case.\nIn the first case, with all data retrieved without exception, we find that $users contains that data. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] } ] In the second case, when specifying the exact required columns from the database, we find that the response is as follows. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } ] } ] Here we see the difference between the two cases in the size of the data that was processed, and the matter increases if the size of the data is much larger than that. When selecting specific columns in relationships, you must choose foreignKey because without choosing it, the data will not be returned correctly from the database.\nWe go to the following path resources/views/users and modify this file list.blade.php to display the users and their profiles. Also, what interests us here is displaying the posts for each user. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Posts\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;ul\u0026gt; @foreach ($user-\u0026gt;posts as $post) \u0026lt;li\u0026gt;{{ $post-\u0026gt;title }}\u0026lt;/li\u0026gt; @endforeach \u0026lt;/ul\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open the browser and go to the following link http://127.0.0.1:8000/users to see what results will appear. Users view with posts By using API Resources. # We will create an API Resource for the Post form by executing this command in the command prompt. php artisan make:resource PostResource You go to the following path App/Http/Resources and we begin to modify each of the following: PostResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class PostResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, ]; } } We first go to the routes/api.php file to add a new route. use App\\Models\\User; use App\\Http\\Resources\\UserResource; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;, \u0026#39;posts\u0026#39;])-\u0026gt;get(); $usersResource = UserResource::collection($users); return response()-\u0026gt;json($usersResource); }); Open the browser and go to the following link http://127.0.0.1:8000/api/users to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34; }, { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34; }, { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34; }, { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34; }, { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34; } ] } ] We also see here that we fetch only the required data.\nThrough the post Post Model # This method is divided into two sub-methods depending on how the data is organized after it is fetched from the data base\nWithout using API Resources. # We first go to the routes/web.php file so that we can test these methods and add this new route. use App\\Models\\Post; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with(\u0026#39;user\u0026#39;, \u0026#39;user.profile\u0026#39;)-\u0026gt;get(); return view(\u0026#39;posts.list\u0026#39;, compact(\u0026#39;posts\u0026#39;)); }); Here we can choose the columns for each relationship as follows.\nuse App\\Models\\Post; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with(\u0026#39;user:username,id\u0026#39;, \u0026#39;user.profile:firstname,lastname,user_id\u0026#39;)-\u0026gt;get(); return view(\u0026#39;posts.list\u0026#39;, compact(\u0026#39;posts\u0026#39;)); }); In order to know the difference between selecting or not selecting columns from the database, let us see the specific response to each case.\nIn the first case, with all data retrieved without exception, we find that $posts contains that data. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] In the second case, when specifying the exact required columns from the database, we find that the response is as follows. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;id\u0026#34;: 3, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } } ] When choosing specific columns in the relationships, you must choose id and you must choose the user relationship, because without you choosing it, the user will not return with the post.\nWe go to the following path resources/views/users and modify this file list.blade.php to display the users and their profiles. Also, what interests us here is displaying the posts Private for each user. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Posts\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;ul\u0026gt; @foreach ($user-\u0026gt;posts as $post) \u0026lt;li\u0026gt;{{ $post-\u0026gt;title }}\u0026lt;/li\u0026gt; @endforeach \u0026lt;/ul\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open the browser and go to the following link http://127.0.0.1:8000/users to see what results will appear. Users view with posts By using API Resources. # You go to the following path App/Http/Resources and we start editing the file PostResource.php: \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class PostResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, \u0026#39;user\u0026#39; =\u0026gt; UserResource::make($this-\u0026gt;whenLoaded(\u0026#39;user\u0026#39;)), ]; } } We first go to the routes/web.php file to add a new route. use App\\Models\\Post; use App\\Http\\Resources\\PostResource; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with([\u0026#39;user\u0026#39;])-\u0026gt;get(); $postsResource = PostResource::collection($posts); return response()-\u0026gt;json($postsResource); }); Open the browser and go to the following link http://127.0.0.1:8000/api/posts to see what results will appear. [ { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34; } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34; } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34; } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } } ] We also see here that we fetch only the required data.\nYou can find the repo of this series on github here: laravelspa/laravel-relations PHP 0 0 ","date":"18 August 2023","permalink":"/blog/how-can-you-retrieve-data-from-a-one-to-many-relationship-in-laravel/","section":"Blogs","summary":"How do you retrieve data from one to many relationship in Laravel? We saw how data is saved in multiple different ways within the database using the One-To-Many relationship in Laravel.","title":"How can you retrieve data from a one-to-many relationship in Laravel?"},{"content":" How to insert data in a one-to-many relationship in the database? After we created a One-To-Many relationship between both Users table and Posts table and added hasMany inside User Model, also we added the inverse relationship inside Post Model by adding belongsTo to it.\nThe time has come to find out how the data is saved in the database while we use this relationship. What are the methods used in this?\nThese methods are divided into three basic methods:\nWithout using function post. By using function post. By using the inverse relationship function user. 1.Without using function post. # Here there are two scenarios:\nFirst: Add only one post for the user. Second: Add more than one post for the user. First: Add only one post for the user. # We first go to the routes/web.php file and add a new route so that we can test these methods. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(1); Post::create([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 1\u0026#39;, ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that one post has been successfully added to user NoisyId No. 1. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34; } ] } Second: Add more than one post for the user. # We first go to the routes/web.php file and edit this route. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(2); Post::insert( [ [ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 2\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 2\u0026#39;, ], [ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 3\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 3\u0026#39;, ], ] ); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that 2 posts have been successfully added to the user with ID No. 2. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null } ] } 2. By using function post. # Here also there are two scenarios: First: Add only one post for the user Second: Add more than one post for the user\nFirst: Add only one post for the user # We first go to the routes/web.php file and edit this route. use App\\Models\\User; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(3); $user-\u0026gt;posts()-\u0026gt;create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 4\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 4\u0026#39;, ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts, ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that one post has been successfully added to the user with ID No. 3. { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:37:55.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:37:55.000000Z\u0026#34; } ] } Second: Add more than one post for the user # We first go to the routes/web.php file and edit this route. use App\\Models\\User; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(1); $user-\u0026gt;posts()-\u0026gt;createMany([ [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 5\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 5\u0026#39;, ], [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 6\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 6\u0026#39;, ] ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts, ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that 2 posts have been successfully added to the user with ID No. 1. In addition to these posts, there is another post that was added in a previous step, and therefore there should be 3 posts for this user. This is actually the data obtained from the database in the following response.\n{ \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34; } ] } 3. By using the inverse relationship function user. # We first go to the routes/web.php file and edit this route. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(2); $post = new Post([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 7\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 7\u0026#39;, ]); $post-\u0026gt;user()-\u0026gt;associate($user)-\u0026gt;save(); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $post-\u0026gt;user-\u0026gt;username, \u0026#39;title\u0026#39; =\u0026gt; $post-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $post-\u0026gt;body, ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-many to find that a post has been successfully added to the user with ID No. 2. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34; } You can find the repo of this series on github here: laravelspa/laravel-relations PHP 0 0 ","date":"17 August 2023","permalink":"/blog/how-to-insert-data-in-one-to-many-relationship-in-database/","section":"Blogs","summary":"How to insert data in a one-to-many relationship in the database? After we created a One-To-Many relationship between both Users table and Posts table and added hasMany inside User Model, also we added the inverse relationship inside Post Model by adding belongsTo to it.","title":"How to insert data in one to many relationship in database?"},{"content":"After we learned about the types of relationships within Laravel in the previous part. We discussed the first type of these relationships, which is the One-To-One relationship.\nToday we continue the series we started learning about Laravel Eloquent Relationships.\nWe are talking about the second type, which is called One-To-Many or hasMany.\nlaravel one to many relationship How to create a One-To-Many relationship in Laravel? # How to create a One-To-Many relationship in Laravel? The One-To-Many relationship is one of the most important types of relationships inside Laravel Eloquent. We also learned in the previous lesson that it is the connection of a row from the first table to more than one row from the second table.\nAnd as a continuation of the practical application (content management system), which we started in the previous lesson. We create a One-To-One relationship between the user and the personal profile.\nToday we are going to create One-To-Many relationship between user and post. Each user can own one or more publications.\nWe create Post Model with its own table. php artisan make:model Post -m We go to this path database/migrations and modify the publications table by adding some columns as follows: Schema::create(\u0026#39;posts\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;title\u0026#39;); $table-\u0026gt;text(\u0026#39;body\u0026#39;); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); We modify the Post.php file. protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;body\u0026#39;, ]; We execute this command to update the database and add the Posts table. php artisan migrate We go to the User.php file and set the hasMany relationship. public function posts() { return $this-\u0026gt;hasMany(Post::class); } Let\u0026rsquo;s learn how hasMany works\n$this-\u0026gt;hasMany(Post::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // localKey =\u0026gt; Primary Key In Parent Table By Default is Id ); We go to the file Post.php and set the inverse relationship belongsTo. public function user() { return $this-\u0026gt;belongsTo(User::class); } We have explained belongsTo in this part of the previous article and we are explaining the One-To-One relationship.\nYou can find the repo of this series on github here: laravelspa/laravel-relations PHP 0 0 ","date":"16 August 2023","permalink":"/blog/how-to-create-a-one-to-many-relationship-in-laravel/","section":"Blogs","summary":"After we learned about the types of relationships within Laravel in the previous part. We discussed the first type of these relationships, which is the One-To-One relationship.\nToday we continue the series we started learning about Laravel Eloquent Relationships.","title":"How to create a One-To-Many relationship in Laravel?"},{"content":" How to delete data from one to one relationship in Laravel? Delete data using User Model. # We first go to the routes/web.php file and add this route: Route::get(\u0026#39;/users/profile/delete\u0026#39;, method () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;profile()-\u0026gt;delete(); return response()-\u0026gt;json($user); }); We open the browser and navigate to the new URL http://127.0.0.1:8000/users/profile/delete to find that the profile have been deleted successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;Joun Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: null } Refresh the page twice to show that this user\u0026rsquo;s profile has been deleted.\nDelete data Using Profile Model. # We first go to the routes/web.php file and add this route: Route::get(\u0026#39;/profiles/user/delete\u0026#39;, method () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;findOrFail(2); $profile-\u0026gt;delete(); $profile-\u0026gt;user()-\u0026gt;delete(); }); We open the browser and navigate to the new URL http://127.0.0.1:8000/profiles/user/delete. We see that both the user and the profile have been deleted successfully. Rcord has deleted Conclusion # This article is the start of a whole series on Laravel Eloquent Relationships - Relationships within Laravel. We have covered the One TO One relationship in a complete way. We did not spare you any information, and God willing, in the following explanation, we will learn about the One To Many relationship.\nYou can find the repo of this series on github here: laravelspa/laravel-relations PHP 0 0 ","date":"15 August 2023","permalink":"/blog/how-to-delete-data-from-one-to-one-relationship-in-laravel/","section":"Blogs","summary":"How to delete data from one to one relationship in Laravel? Delete data using User Model. # We first go to the routes/web.php file and add this route: Route::get(\u0026#39;/users/profile/delete\u0026#39;, method () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;profile()-\u0026gt;delete(); return response()-\u0026gt;json($user); }); We open the browser and navigate to the new URL http://127.","title":"How to delete data from one to one relationship in Laravel?"},{"content":" How to update one to many relationship in Laravel? Update data using the user form. # Using push method. First go to routes/web.php file and modify this route: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:37:30.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1\u0026#39;; $post-\u0026gt;update(); return response()-\u0026gt;json($user); ]); We open the browser and go to the new URL http://127.0.0.1:8000/users/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:41:35.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } Update data using the post form. # Using push method. First go to routes/web.php file and add this route: Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($post); }); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:50:30.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } Using update method. First go to the file routes/web.php and modify this route. Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe\u0026#39;; $post-\u0026gt;update([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39; ]); return response()-\u0026gt;json($post); ]); We open the browser and go to the new URL http://127.0.0.1:8000/posts/update to find that the post has been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:55:45.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } You can find the repo of this series on github here: laravelspa/laravel-relations PHP 0 0 ","date":"14 August 2023","permalink":"/blog/how-to-update-a-one-to-one-relationship-in-laravel/","section":"Blogs","summary":"How to update one to many relationship in Laravel? Update data using the user form. # Using push method. First go to routes/web.php file and modify this route: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($user); }); We open the browser and go to the new URL http://127.","title":"How to update a one-to-one relationship in Laravel?"},{"content":" How can you retrieve data from a one-to-one relationship in Laravel? We have seen how data is saved in several different ways in the database using the one-to-one relationship in Laravel. But how do we retrieve the data from the database? There are several ways to retrieve data from the database.\nThese methods can be divided into two main categories:\nDirect retrieval: This method involves directly querying the database for the data that you need. This is the most efficient way to retrieve data, but it can be difficult to use if you are not familiar with SQL.\nEloquent ORM: Laravel\u0026rsquo;s Eloquent ORM provides a more user-friendly way to retrieve data from the database. Eloquent ORM uses a set of methods to map database tables to objects in PHP. This makes it easy to retrieve data from the database without having to know SQL. In this tutorial, we will focus on using Eloquent ORM to retrieve data from the database.\nWhile retrieving users data: # While collecting user data, we will obtain their personal profiles. After that, the matter of displaying that data is divided into two forms, not a third. The type of application you are working on and the theme used will determine which form to use.\nFirst: an application that uses web routes. Second: an application that depends on API routes. First: Depends on Web Routes. # We first go to the routes/web.php file and make the following changes: Route::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); If we check the response for this command, we will find that all data has been obtained from the database.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] Here, you can choose only the columns that you need in the following form:\nRoute::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile:firstname,lastname,user_id\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); If we now check again, you will find that the data size has been reduced.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } } ] Here, we see the difference between the two cases in the size of the processed data. The matter increases significantly if the data is much larger than that.\nWhen choosing specific columns from relationships, you must always choose the foreign key column. Without choosing it, the data will not be returned correctly from the database.\nInside the views folder, we add another folder named users. Inside the users folder, we add the file list.blade.php. In list.blade.php, we add this simple table to display the users: \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open your browser and go to the following URL http://127.0.0.1:8000/users to see what results will appear. Users Table Second: Depends on Api Routes. # What are API Resources?\nSimply, it is an intermediate layer between Eloquent and the API response, converting data obtained from the database into JSON with the ability to specify specific data without others or manipulate that data.\nWe will create an API Resource for users and profiles. Execute this command at the command prompt. php artisan make:resource UserResource php artisan make:resource ProfileResource Go to the following path: App\\Http\\Resources and edit both: The file ProfileResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; $this-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $this-\u0026gt;lastname, ]; } } The file UserResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class UserResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;username\u0026#39; =\u0026gt; $this-\u0026gt;username, \u0026#39;profile\u0026#39; =\u0026gt; ProfileResource::make($this-\u0026gt;whenLoaded(\u0026#39;profile\u0026#39;)), ]; } } Go to your routes/api.php file and add a new route. use App\\Models\\User; use App\\Http\\Resources\\UserResource; --- Route::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); $usersResource = UserResource::collection($users); return response()-\u0026gt;json($usersResource); }); Open your browser and go to the following URL http://127.0.0.1:8000/api/users to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } } ] We also see here that we have obtained the required data specified within the API Resources files only.\nWhile retrieving profiles data: # While obtaining profile data, we will obtain each user associated with those profiles. After that, the data can be displayed in two forms, not three. The type of application you are working on and the theme used will determine which form of data display is most appropriate.\nFirst: an application that uses web routes. Second: an application that depends on API routes. First: Depends on Web Routes. # We first go to the routes/web.php file and make the following changes: Route::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); If we check the response for this command, we will find that all data has been obtained from the database.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] Here, you can choose only the columns that you need in the following form:\nRoute::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with(\u0026#39;user:username,id\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); If we now check again, you will find that the data size has been reduced.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;id\u0026#34;: 3 } } ] Here, we see the difference between the two cases in the size of the processed data. The matter increases significantly if the data is much larger than that.\nWhen selecting specific columns in relationships, you must include the id field when choosing the user relationship. Otherwise, the user will not be returned with the profile.\nInside the views folder, we add another folder named profiles. Inside the profiles folder, we add the file list.blade.php. In list.blade.php, we add this simple table to display the profiles: \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($profiles as $profile) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open your browser and go to the following URL http://127.0.0.1:8000/profiles to see what results will appear. Profiles Table Second: Depends on Api Routes. # Go to the following path: App\\Http\\Resources and edit the file ProfileResource.php: \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, \u0026#39;user\u0026#39; =\u0026gt; UserResource::make($this-\u0026gt;whenLoaded(\u0026#39;user\u0026#39;)), ]; } } Go to your routes/api.php file and add a new route. use App\\Models\\Profile; use App\\Http\\Resources\\ProfileResource; --- Route::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with([\u0026#39;user\u0026#39;])-\u0026gt;get(); $profilesResource = ProfileResource::collection($profiles); return response()-\u0026gt;json($profilesResource); }); Open your browser and go to the following URL http://127.0.0.1:8000/api/profiles to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34; } } ] How to improve Eloquent queries in Laravel? # How to improve Eloquent queries in Laravel? When dealing with a large database with a lot of data, it is important to consider performance. This means not only how long it takes to get the data, but also how many queries are executed per page.\nTo test the performance of your application, you can use a library called Laravel Debugbar. Debugbar will show you all the queries that are executed on each page, as well as how long each query takes to execute. This information can help you to identify performance bottlenecks and optimize your application.\nLet\u0026rsquo;s run this command. composer require barryvdh/laravel-debugbar --dev Make sure that APP_DEBUG=true is inside the .env file.\nThe difference between the two cases is as follows: $users = User::all(); $users = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;get(); We open the browser and go to the following URL: http://127.0.0.1:8000/users to see what results will appear in the library bar. (Lazy Loading) - Retrieve data without using with. laravel debugbar lazy loading At the bottom of the page, we will now find a bar for the Laravel Debugbar library. When you click on it, we will find that it works with a lot of data. The thing that interests us here is the number of SQL queries on this page, and as shown, they are 4 queries.\nAnd we only retrieved 3 users, imagine with me if there are tens of thousands or millions of users inside this database, the time to load this page will be very slow because of the huge number of queries.\nThis is called the N+1 problem in Laravel. It is caused by lazy loading relationships, which means that the associated data is not loaded until it is actually needed. In this case, we are lazy loading the posts relationship for each user. This means that we are making a separate query for each user to get their profiles.\nIf there are 1000 users, we will make 1001 queries: 1 query to get the users, and 1000 queries to get their profiles. This is a waste of server resources and can make your application slow.\nTo solve the N+1 problem, you can eager load the relationships. This means that you will load the associated data when you first retrieve the data. In this case, you would use the with() method to eager load the profiles relationship. This would only make one query to get the users and their profiles.\nEager loading can improve the performance of your application by reducing the number of queries. It is a good practice to eager load relationships whenever possible.\n(Eager Loading) - Retrieve data using with. laravel debugbar eager loading As you can see, by adding the with() method with the name of the relationship, each user\u0026rsquo;s data will be fetched with their own profile without the N+1 problem.\nSo the number of queries was reduced from 4 to 2 only. This will clearly have an effect if this database is of medium size or large. This is what is called eager loading.\nYou can find the repo of this series on github here: laravelspa/laravel-relations PHP 0 0 ","date":"13 August 2023","permalink":"/blog/how-can-you-retrieve-data-from-a-one-to-one-relationship-in-laravel/","section":"Blogs","summary":"How can you retrieve data from a one-to-one relationship in Laravel? We have seen how data is saved in several different ways in the database using the one-to-one relationship in Laravel.","title":"How can you retrieve data from a one-to-one relationship in Laravel?"},{"content":" How to insert data in one to one relationship in database? After we created a one-to-one relationship between the users table and the profiles table, and added the hasOne() method to the User model, and the belongsTo() method to the Profile model, it\u0026rsquo;s time to find out how the data is saved in the database when we use this relationship. And what are the methods used for that?\nThese methods are divided into three main ways:\nWithout using method profile. By using method profile. By using the inverse method user. The best method to use depends on the specific needs of your application. If you only need to save the profile associated with the user, then the first method is the simplest option. If you need to get, update, or delete the profile, then the second method is a better option. If you need to get, update, or delete the user, then the third method is a better option.\n1. Without using method profile. # We first go to the routes/web.php file and add a new route so that we can test these method. use App\\Models\\Profile; use App\\Models\\User; --- Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;John Doe\u0026#39;]); Profile::create([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;John\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;08-11-1991\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); We opened the browser and went to the link http://127.0.0.1:8000/one-to-one. To our satisfaction, the user had been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } 2. By using method profile. # We first go to the routes/web.php file and edit this route. Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Tom Cruz\u0026#39;]); $user-\u0026gt;profile()-\u0026gt;create([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Tom\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Cruz\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-02-2000\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); We open the browser again and go to this link: http://127.0.0.1:8000/one-to-one to find that the user has been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } 3. By using the inverse method user. # We first go to the routes/web.php file and update this route. Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Adam Smith\u0026#39;]); $profile = new Profile([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Adam\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Smith\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-01-1999\u0026#39; ]); $profile-\u0026gt;user()-\u0026gt;associate($user)-\u0026gt;save(); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $profile-\u0026gt;user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $profile-\u0026gt;lastname, ]); }); We open the browser again and go to this link: http://127.0.0.1:8000/one-to-one to find that the user has been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } You can find the repo of this series on github here: laravelspa/laravel-relations PHP 0 0 ","date":"12 August 2023","permalink":"/blog/how-to-insert-data-in-one-to-one-relationship-in-database/","section":"Blogs","summary":"How to insert data in one to one relationship in database? After we created a one-to-one relationship between the users table and the profiles table, and added the hasOne() method to the User model, and the belongsTo() method to the Profile model, it\u0026rsquo;s time to find out how the data is saved in the database when we use this relationship.","title":"How to insert data in one to one relationship in database?"},{"content":" How to create a One-To-One relationship in Laravel? One-to-One relationships are the simplest type of relationship offered by Laravel. They join two tables such that one row in the first table is associated with only one row in the other table, or the same table.\nlaravel one to one relationship To see this in action, we\u0026rsquo;ll start by creating a content management system.\nTo see this in action, let\u0026rsquo;s start by creating a content management system. Let\u0026rsquo;s say each user has their own single profile. In some cases, you can store all profile information in the Users table. However, this is not ideal.\nIn our example, we want to create a separate table for personal profiles. This will allow us to transfer a profile from one user to another easily if we need to.\nBy default, the Users table exists in Laravel. The columns that it contains do not matter for this example.\nLet\u0026rsquo;s say we have a users table with the following columns: Schema::create(\u0026#39;users\u0026#39;, method (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;username\u0026#39;); $table-\u0026gt;string(\u0026#39;email\u0026#39;)-\u0026gt;unique(); $table-\u0026gt;timestamps(); }); We edit the User.php file. protected $fillable = [\u0026#39;username\u0026#39;]; We create Profile Model with its table. php artisan make:model Profile -m In a one-to-one relationship, we have the freedom to choose one of these two methods to establish the relationship:\nAdd user_id in the profiles table. Add profile_id in the users table. Usually, the column that joins the two tables is added to the second table. So, we will add it to the profiles table as follows:\nSchema::create(\u0026#39;profiles\u0026#39;, method (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;firstname\u0026#39;); $table-\u0026gt;string(\u0026#39;lastname\u0026#39;); $table-\u0026gt;string(\u0026#39;birthday\u0026#39;); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); We edit the Profile.php file. protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;firstname\u0026#39;, \u0026#39;lastname\u0026#39;, \u0026#39;birthday\u0026#39; ]; Let\u0026rsquo;s run this command to update the database. php artisan migrate Let\u0026rsquo;s go to the User.php file to define the relationship. public method profile() { return $this-\u0026gt;hasOne(Profile::class); } Let\u0026rsquo;s see how the hasOne() method works. This method is used to save the id of the related model in the foreign key column of the parent model.\n$this-\u0026gt;hasOne(Profile::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // localKey =\u0026gt; Primary Key In Parent Table By Default is Id ); Let\u0026rsquo;s go to the Profile.php file to define the inverse relationship. public method user() { return $this-\u0026gt;belongsTo(User::class); } Let\u0026rsquo;s find out how the belongsTo() method works. This method is used to save the id of the parent model in the primary key column of the related model.\n$this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // OwnerKey By Default Id ); Let\u0026rsquo;s say you want to name the relationship something like admin, we need to add the foreignKey property to the relationship method.\npublic method admin() { return $this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // You must add foreignKey ); } The foreignKey property is used to specify the name of the column in the child model that is used to reference the parent model.\nIf you do not add the foreignKey property to the relationship method when changing the relationship name, you will see the following error: Attempt to read property X on null You can find the repo of this series on github here: laravelspa/laravel-relations PHP 0 0 ","date":"11 August 2023","permalink":"/blog/how-to-create-a-one-to-one-relationship-in-laravel/","section":"Blogs","summary":"How to create a One-To-One relationship in Laravel? One-to-One relationships are the simplest type of relationship offered by Laravel. They join two tables such that one row in the first table is associated with only one row in the other table, or the same table.","title":"How to create a One-To-One relationship in Laravel?"},{"content":"Often, developers need to interact with databases. If you are using the Laravel framework, you should know about one of its most important features: Eloquent, an object-relational mapper (ORM) that makes this process simple and easy.\nLaravel Eloquent is one of the main features in the Laravel framework. This is due to its great support for defining, creating, and managing relationships between different tables. In this series of articles, I will show you how to create and use Eloquent relationships.\nIt is important to note that you can start using Eloquent without any prior knowledge of relationships.\nAs a professional programmer, it is necessary to understand the types of relationships. However, before that, you must ask yourself an important question: what are relationships in the first place?\nWhat are relationships in databases? # What are relationships in databases? When working with tables in a database that have relationships between them, we can describe these relationships as links between those tables. This helps you organize and structure data effortlessly, allowing for faster data reading and processing.\nWhat types of relationships are there in Laravel? # What types of relationships are there in Laravel? There are three main types of relationships in databases that are commonly used in practice:\none-to-one: A one-to-one relationship means that one record in one table can only be related to one record in another table. For example, a customer table might have a one-to-one relationship with an address table. This means that each customer can only have one address, and each address can only be associated with one customer.\none-to-many: A one-to-many relationship means that one record in one table can be related to many records in another table. For example, an order table might have a one-to-many relationship with a product table. This means that one order can have many products, but each product can only be associated with one order.\nmany-to-many: A many-to-many relationship means that many records in one table can be related to many records in another table. For example, a student table might have a many-to-many relationship with a course table. This means that many students can take many courses, and many courses can be taken by many students.\nBesides these relationships, Laravel offers more relationships, namely:\nHas Many Through: This relationship allows you to relate a model to another model through a third model. For example, a user model might have a has many through relationship with a post model, where the third model is a category model. This means that a user can have many posts, where each post belongs to a category.\nPolymorphic Relations: This relationship allows you to relate a model to multiple other models of different types. For example, a comment model might have a polymorphic relationship with a model, where the model could be a blog post, a product, or a user. This means that a comment can be associated with any of these three types of models.\nMany-to-many Polymorphic: This relationship is a combination of the has many through and polymorphic relationships. It allows you to relate a model to many other models of different types, where the relationship is mediated by a third model. For example, a user model might have a many-to-many polymorphic relationship with a model, where the third model is a role model. This means that a user can have many roles, where each role could be a user, a product, or a blog post.\nThe number of relationships that we will explain is 6 types. We will build a simple content management system to explain all of those relationships.\nDo I need specific knowledge of Eloquent before reading this?\nIn response to your question about whether you need specific knowledge of Eloquent before reading this, I would say that it is not strictly necessary, but it would be helpful. The examples in the article do not use any complex Eloquent methods or techniques, but it would be helpful to have a basic understanding of how Eloquent works before reading the article.\nIf you are new to Laravel, I would recommend reading the Laravel documentation: https://laravel.com/docs/ before reading this article. The documentation provides a good overview of Eloquent and how it works.\nOnce you have a basic understanding of Eloquent, you should be able to follow the examples in the article without any problems. However, if you get stuck, you can always refer to the documentation for more help.\nIn the examples below, I have tried to explain everything as clearly as possible, without using too many tricky Eloquent methods and complex techniques. This means that prior knowledge is not strictly necessary. However, it is always best to learn the basics first and then pursue more complex topics such as relationships.\n","date":"10 August 2023","permalink":"/blog/what-types-of-relationships-are-there-in-laravel/","section":"Blogs","summary":"Often, developers need to interact with databases. If you are using the Laravel framework, you should know about one of its most important features: Eloquent, an object-relational mapper (ORM) that makes this process simple and easy.","title":"What types of relationships are there in Laravel?"},{"content":"","date":"1 May 2023","permalink":"/tags/full-stack/","section":"Tags","summary":"","title":"full stack"},{"content":" Preview # Laravel 10 Vue 3 What is Laravel # Laravel is a web application framework with expressive, elegant syntax. A web framework provides a structure and starting point for creating your application, allowing you to focus on creating something amazing while we sweat the details. What is Vue js! # Vue is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript. It Helps you efficiently develop user interfaces, be they simple or complex. What is Vite js! # Vite is a build tool that aims to provide a faster and leaner development experience for modern web projects. It consists of two major parts:\nA dev server that provides rich feature enhancements over native ES modules, for example extremely fast Hot Module Replacement (HMR).\nA build command that bundles your code with Rollup, pre-configured to output highly optimized static assets for production. We conclude from the above that the most important thing that distinguishes vite is the speed at the start of the server, as well as making a bundle of files upon completion of the project. Step 1: Create New Laravel Project # composer create-project laravel/laravel laravel10-vue3 Step 2: How To Install Vue 3 on Laravel 10 # npm install npm install vue@next vue-loader@next Step 3: Install Plugin Vue From Vite # npm i @vitejs/plugin-vue Step 4: Edit File vite.config.js # // vite.config.js import { defineConfig } from \u0026#39;vite\u0026#39;; import laravel from \u0026#39;laravel-vite-plugin\u0026#39;; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; export default defineConfig({ plugins: [ vue(), laravel({ input: [\u0026#39;resources/css/app.css\u0026#39;, \u0026#39;resources/js/app.js\u0026#39;], refresh: true, }), ], }); Step 5: Edit File app.js Inside Folder resources/js # import {createApp} from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; createApp(App).mount(\u0026#34;#app\u0026#34;) Step 6: Create File app.blade.php Inside Folder resources/views # Make sure to add the css file and javascript as shown and also the div with id=app \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ str_replace(\u0026#39;_\u0026#39;, \u0026#39;-\u0026#39;, app()-\u0026gt;getLocale()) }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;ًApplication\u0026lt;/title\u0026gt; @vite(\u0026#39;resources/css/app.css\u0026#39;) \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; @vite(\u0026#39;resources/js/app.js\u0026#39;) \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Step 7: Create File App.vue Inside Folder resources/js # \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt; How To Install Vue 3 in Laravel 10 : Laravel SPA :) \u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; Step 8: Edit File web.php Inside Folder routes # \u0026lt;?php use Illuminate\\Support\\Facades\\Route; Route::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;app\u0026#39;); }) -\u0026gt;name(\u0026#39;application\u0026#39;); Step 9: Run PHP Local Server # php artisan serve Step 10: Run Node Local Server # npm run dev Go to the following link http://127.0.0.1:8000/ and you will find the following Laravel 10 Vue 3 You will find the repo for this project on github here [ laravelspa/laravel10-vue3 PHP 3 1 ","date":"1 May 2023","permalink":"/blog/how-to-install-vue3-in-laravel10-with-vite/","section":"Blogs","summary":"Preview # Laravel 10 Vue 3 What is Laravel # Laravel is a web application framework with expressive, elegant syntax. A web framework provides a structure and starting point for creating your application, allowing you to focus on creating something amazing while we sweat the details.","title":"How To Install Vue 3 In Laravel 10 With Vite"},{"content":"","date":"1 May 2023","permalink":"/tags/spa/","section":"Tags","summary":"","title":"spa"},{"content":"","date":"1 May 2023","permalink":"/tags/vue3/","section":"Tags","summary":"","title":"vue3"},{"content":"","date":"1 May 2023","permalink":"/categories/vuejs/","section":"Categories","summary":"","title":"Vuejs"},{"content":"Hi, I\u0026rsquo;m Mahmoud Adel.\nWelcome to Laravel SPA: home of tutorials, videos and tips about Laravel framework. Started back in 2023 as a small personal blog, it grew into a hub of useful information for all levels.\nI also run a YouTube channel with the same name of Laravel SPA.\nYou can follow the latest Laravel tutorials on Twitter or by subscribing to our weekly newsletter.\nIf you want to get in touch, email dev.mahmoud.adel@gmail.com\n","date":"1 January 0001","permalink":"/about-us/","section":"Laravel SPA","summary":"Hi, I\u0026rsquo;m Mahmoud Adel.\nWelcome to Laravel SPA: home of tutorials, videos and tips about Laravel framework. Started back in 2023 as a small personal blog, it grew into a hub of useful information for all levels.","title":"About Us"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":" Go to form ","date":"1 January 0001","permalink":"/contact-us/","section":"Laravel SPA","summary":" Go to form ","title":"Contact Us"},{"content":"At Laravel SPA, accessible from http://laravelspa.site, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by Laravel SPA and how we use it.\nIf you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.\nThis Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in Laravel SPA. This policy is not applicable to any information collected offline or via channels other than this website.\nConsent # By using our website, you hereby consent to our Privacy Policy and agree to its terms.\nInformation we collect # The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information. If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide. When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.\nHow we use your information # We use the information we collect in various ways, including to:\nProvide, operate, and maintain our website Improve, personalize, and expand our website Understand and analyze how you use our website Develop new products, services, features, and functionality Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the website, and for marketing and promotional purposes Send you emails Find and prevent fraud Log Files # Laravel SPA follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services\u0026rsquo; analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users\u0026rsquo; movement on the website, and gathering demographic information.\nCookies and Web Beacons # Like any other website, Laravel SPA uses \u0026ldquo;cookies\u0026rdquo;. These cookies are used to store information including visitors\u0026rsquo; preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users\u0026rsquo; experience by customizing our web page content based on visitors\u0026rsquo; browser type and/or other information.\nGoogle DoubleClick DART Cookie # Google is one of a third-party vendor on our site. It also uses cookies, known as DART cookies, to serve ads to our site visitors based upon their visit to www.website.com and other sites on the internet. However, visitors may choose to decline the use of DART cookies by visiting the Google ad and content network Privacy Policy at the following URL – https://policies.google.com/technologies/ads\nOur Advertising Partners # Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.\nGoogle https://policies.google.com/technologies/ads Advertising Partners Privacy Policies # You may consult this list to find the Privacy Policy for each of the advertising partners of Laravel SPA.\nThird-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on Laravel SPA, which are sent directly to users\u0026rsquo; browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.\nNote that Laravel SPA has no access to or control over these cookies that are used by third-party advertisers.\nThird Party Privacy Policies # Laravel SPA\u0026rsquo;s Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options.\nYou can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers\u0026rsquo; respective websites.\nCCPA Privacy Rights (Do Not Sell My Personal Information) # Under the CCPA, among other rights, California consumers have the right to: Request that a business that collects a consumer\u0026rsquo;s personal data disclose the categories and specific pieces of personal data that a business has collected about consumers. Request that a business delete any personal data about the consumer that a business has collected. Request that a business that sells a consumer\u0026rsquo;s personal data, not sell the consumer\u0026rsquo;s personal data. If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.\nGDPR Data Protection Rights # We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following: The right to access – You have the right to request copies of your personal data. We may charge you a small fee for this service. The right to rectification – You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete. The right to erasure – You have the right to request that we erase your personal data, under certain conditions. The right to restrict processing – You have the right to request that we restrict the processing of your personal data, under certain conditions. The right to object to processing – You have the right to object to our processing of your personal data, under certain conditions. The right to data portability – You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions. If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.\nChildren\u0026rsquo;s Information # Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.\nLaravel SPA does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.\nChanges to This Privacy Policy # We may update our Privacy Policy from time to time. Thus, we advise you to review this page periodically for any changes. We will notify you of any changes by posting the new Privacy Policy on this page. These changes are effective immediately, after they are posted on this page.\nContact Us # If you have any questions or suggestions about our Privacy Policy, do not hesitate to contact us.\n","date":"1 January 0001","permalink":"/privacy-policy/","section":"Laravel SPA","summary":"At Laravel SPA, accessible from http://laravelspa.site, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by Laravel SPA and how we use it.","title":"Privacy Policy"},{"content":"Thank you for reading my blog!\nSign up for my emil newsletter or use this RSS feed to get notified of new blog posts.\n","date":"1 January 0001","permalink":"/subscribe/","section":"Laravel SPA","summary":"Thank you for reading my blog!\nSign up for my emil newsletter or use this RSS feed to get notified of new blog posts.","title":"Subscribe Me"},{"content":"Welcome to Laravel SPA!\nThese terms and conditions outline the rules and regulations for the use of Laravel SPA\u0026rsquo;s Website, located at http://laravelspa.site.\nBy accessing this website we assume you accept these terms and conditions. Do not continue to use Laravel SPA if you do not agree to take all of the terms and conditions stated on this page.\nThe following terminology applies to these Terms and Conditions, Privacy Statement and Disclaimer Notice and all Agreements: \u0026ldquo;Client\u0026rdquo;, \u0026ldquo;You\u0026rdquo; and \u0026ldquo;Your\u0026rdquo; refers to you, the person log on this website and compliant to the Company\u0026rsquo;s terms and conditions. \u0026ldquo;The Company\u0026rdquo;, \u0026ldquo;Ourselves\u0026rdquo;, \u0026ldquo;We\u0026rdquo;, \u0026ldquo;Our\u0026rdquo; and \u0026ldquo;Us\u0026rdquo;, refers to our Company. \u0026ldquo;Party\u0026rdquo;, \u0026ldquo;Parties\u0026rdquo;, or \u0026ldquo;Us\u0026rdquo;, refers to both the Client and ourselves. All terms refer to the offer, acceptance and consideration of payment necessary to undertake the process of our assistance to the Client in the most appropriate manner for the express purpose of meeting the Client\u0026rsquo;s needs in respect of provision of the Company\u0026rsquo;s stated services, in accordance with and subject to, prevailing law of eg. Any use of the above terminology or other words in the singular, plural, capitalization and/or he/she or they, are taken as interchangeable and therefore as referring to same.\nCookies # We employ the use of cookies. By accessing Laravel SPA, you agreed to use cookies in agreement with the Laravel SPA\u0026rsquo;s Privacy Policy.\nMost interactive websites use cookies to let us retrieve the user\u0026rsquo;s details for each visit. Cookies are used by our website to enable the functionality of certain areas to make it easier for people visiting our website. Some of our affiliate/advertising partners may also use cookies.\nLicense # Unless otherwise stated, Laravel SPA and/or its licensors own the intellectual property rights for all material on Laravel SPA. All intellectual property rights are reserved. You may access this from Laravel SPA for your own personal use subjected to restrictions set in these terms and conditions.\nYou must not:\nRepublish material from Laravel SPA Sell, rent or sub-license material from Laravel SPA Reproduce, duplicate or copy material from Laravel SPA Redistribute content from Laravel SPA Parts of this website offer an opportunity for users to post and exchange opinions and information in certain areas of the website. Laravel SPA does not filter, edit, publish or review Comments prior to their presence on the website. Comments do not reflect the views and opinions of Laravel SPA,its agents and/or affiliates. Comments reflect the views and opinions of the person who post their views and opinions. To the extent permitted by applicable laws, Laravel SPA shall not be liable for the Comments or for any liability, damages or expenses caused and/or suffered as a result of any use of and/or posting of and/or appearance of the Comments on this website.\nLaravel SPA reserves the right to monitor all Comments and to remove any Comments which can be considered inappropriate, offensive or causes breach of these Terms and Conditions.\nYou warrant and represent that:\nYou are entitled to post the Comments on our website and have all necessary licenses and consents to do so; The Comments do not invade any intellectual property right, including without limitation copyright, patent or trademark of any third party; The Comments do not contain any defamatory, libelous, offensive, indecent or otherwise unlawful material which is an invasion of privacy The Comments will not be used to solicit or promote business or custom or present commercial activities or unlawful activity. You hereby grant Laravel SPA a non-exclusive license to use, reproduce, edit and authorize others to use, reproduce and edit any of your Comments in any and all forms, formats or media.\nHyperlinking to our Content # The following organizations may link to our Website without prior written approval:\nGovernment agencies; Search engines; News organizations; Online directory distributors may link to our Website in the same manner as they hyperlink to the Websites of other listed businesses; and System wide Accredited Businesses except soliciting non-profit organizations, charity shopping malls, and charity fundraising groups which may not hyperlink to our Web site. These organizations may link to our home page, to publications or to other Website information so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products and/or services; and (c) fits within the context of the linking party\u0026rsquo;s site.\nWe may consider and approve other link requests from the following types of organizations:\ncommonly-known consumer and/or business information sources; dot.com community sites; associations or other groups representing charities; online directory distributors; internet portals; accounting, law and consulting firms; and educational institutions and trade associations. We will approve link requests from these organizations if we decide that: (a) the link would not make us look unfavorably to ourselves or to our accredited businesses; (b) the organization does not have any negative records with us; (c) the benefit to us from the visibility of the hyperlink compensates the absence of Laravel SPA; and (d) the link is in the context of general resource information.\nThese organizations may link to our home page so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products or services; and (c) fits within the context of the linking party\u0026rsquo;s site.\nIf you are one of the organizations listed in paragraph 2 above and are interested in linking to our website, you must inform us by sending an e-mail to Laravel SPA. Please include your name, your organization name, contact information as well as the URL of your site, a list of any URLs from which you intend to link to our Website, and a list of the URLs on our site to which you would like to link. Wait 2-3 weeks for a response.\nApproved organizations may hyperlink to our Website as follows:\nBy use of our corporate name; or By use of the uniform resource locator being linked to; or By use of any other description of our Website being linked to that makes sense within the context and format of content on the linking party's site. No use of Laravel SPA\u0026rsquo;s logo or other artwork will be allowed for linking absent a trademark license agreement.\niFrames # Without prior approval and written permission, you may not create frames around our Webpages that alter in any way the visual presentation or appearance of our Website.\nContent Liability # We shall not be hold responsible for any content that appears on your Website. You agree to protect and defend us against all claims that is rising on your Website. No link(s) should appear on any Website that may be interpreted as libelous, obscene or criminal, or which infringes, otherwise violates, or advocates the infringement or other violation of, any third party rights.\nReservation of Rights # We reserve the right to request that you remove all links or any particular link to our Website. You approve to immediately remove all links to our Website upon request. We also reserve the right to amen these terms and conditions and it\u0026rsquo;s linking policy at any time. By continuously linking to our Website, you agree to be bound to and follow these linking terms and conditions.\nRemoval of links from our website # If you find any link on our Website that is offensive for any reason, you are free to contact and inform us any moment. We will consider requests to remove links but we are not obligated to or so or to respond to you directly.\nWe do not ensure that the information on this website is correct, we do not warrant its completeness or accuracy; nor do we promise to ensure that the website remains available or that the material on the website is kept up to date.\nDisclaimer # To the maximum extent permitted by applicable law, we exclude all representations, warranties and conditions relating to our website and the use of this website. Nothing in this disclaimer will:\nlimit or exclude our or your liability for death or personal injury; limit or exclude our or your liability for fraud or fraudulent misrepresentation; limit any of our or your liabilities in any way that is not permitted under applicable law; or exclude any of our or your liabilities that may not be excluded under applicable law. The limitations and prohibitions of liability set in this Section and elsewhere in this disclaimer: (a) are subject to the preceding paragraph; and (b) govern all liabilities arising under the disclaimer, including liabilities arising in contract, in tort and for breach of statutory duty.\nAs long as the website and the information and services on the website are provided free of charge, we will not be liable for any loss or damage of any nature.\n","date":"1 January 0001","permalink":"/terms-and-conditions/","section":"Laravel SPA","summary":"Welcome to Laravel SPA!\nThese terms and conditions outline the rules and regulations for the use of Laravel SPA\u0026rsquo;s Website, located at http://laravelspa.site.\nBy accessing this website we assume you accept these terms and conditions.","title":"Terms and Conditions"}]