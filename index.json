[{"content":"","date":"10 August 2023","permalink":"/blog/","section":"Blogs","summary":"","title":"Blogs"},{"content":"","date":"10 August 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"10 August 2023","permalink":"/tags/eloquent/","section":"Tags","summary":"","title":"eloquent"},{"content":"","date":"10 August 2023","permalink":"/tags/eloquent-relationships/","section":"Tags","summary":"","title":"eloquent relationships"},{"content":"","date":"10 August 2023","permalink":"/categories/laravel/","section":"Categories","summary":"","title":"Laravel"},{"content":"Often the developer needs to interact with databases. And if you are using the Laravel framework, you should know about the most important feature of Laravel, which is called Eloquent, the object relationship diagram (ORM) that makes this process simple and easy.\nLaravel Eloquent is one of the main features in the Laravel framework. This is due to its great support for defining, creating and managing relationships between different tables. In this series of articles I will show you how to create and use Eloquent relationships.\nNoting that you can start without any prior knowledge of relationships.\nlaravel one to one relationship It is necessary as a professional programmer to understand the types of relationships, but before that you must ask yourself an important question, what are the relationships in the first place?\nWhat are relationships in databases? # When working with tables in a database that have relationships between them, we can describe these relationships as connections between those tables. This helps you organize and structure data effortlessly allowing for faster data reading and processing.\nWhat types of relationships are there in Laravel? # There are three main types of relationships in databases that emerge in practice:\none-to-one: It is a single record associated with only one record. An example of this is that each user has one profile in another table. one-to-many: It is the association of only one record with more than one other record. An example of this is that each writer has more than one article. many-to-many: It is the association of more than one record with more than one other record. An example of this is that more than one user can join more than one session. Besides these relationships, Laravel offers more relationships, namely:\nHas Many Through Polymorphic Relations Many-to-many Polymorphic The number of relationships that we will explain becomes 6 types. And we\u0026rsquo;re going to build a simple content management system to explain all of those relationships.\nDo I need specific knowledge of Eloquent before reading this?\nIn the examples below, I have tried to explain everything as clearly as possible, without using too many Eloquent tricky functions and complex techniques. This means that prior knowledge is not strictly necessary.\nHowever, it is always best to learn the basics first and then pursue more complex topics such as relationships.\nHow to create a One-To-One relationship in Laravel? # Being the first and simplest basic relationship offered by Laravel, it joins two tables such that one row of the first table is associated with only one row of the other table, or the same table.\nTo see this in action, we\u0026rsquo;ll start by creating a content management system.\nLet\u0026rsquo;s say each user has his own single profile. In some cases, you can store all profile information in the Users table. But this will not be ideal.\nIn our example, we want to create a separate table for personal profiles. If we later want to transfer a profile from one user to another, this will be available.\nBy default, the Users table exists, and it does not matter which columns it will contain.\nLet\u0026rsquo;s say we have a Users table with the following columns: Schema::create(\u0026#39;users\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;username\u0026#39;); $table-\u0026gt;string(\u0026#39;email\u0026#39;)-\u0026gt;unique(); $table-\u0026gt;timestamps(); }); We modify the User.php file. protected $fillable = [\u0026#39;username\u0026#39;]; We create Profile Model with its table. php artisan make:model Profile -m In a One-to-One relationship we have the freedom to choose one of these two methods:\nAdd user_id in the profiles table. Add profile_id in the users table. Mostly this column that joins the two tables is always added to the second table, so we will add it to the profiles table as follows.\nSchema::create(\u0026#39;profiles\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;firstname\u0026#39;); $table-\u0026gt;string(\u0026#39;lastname\u0026#39;); $table-\u0026gt;string(\u0026#39;birthday\u0026#39;); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); We modify the Profile.php file. protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;firstname\u0026#39;, \u0026#39;lastname\u0026#39;, \u0026#39;birthday\u0026#39; ]; Let\u0026rsquo;s run this command to update the database. php artisan migrate Let\u0026rsquo;s go to the User.php file to set the relationship. public function profile() { return $this-\u0026gt;hasOne(Profile::class); } Let\u0026rsquo;s see how hasOne works\n$this-\u0026gt;hasOne(Profile::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // localKey =\u0026gt; Primary Key In Parent Table By Default is Id ); Let\u0026rsquo;s go to the Profile.php file to set the inverse relationship. public function user() { return $this-\u0026gt;belongsTo(User::class); } Let\u0026rsquo;s find out how belongsTo works.\n$this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // OwnerKey By Default Id ); Let\u0026rsquo;s say you want to name the relationship something like admin, we need to add foreignKey.\npublic function admin() { return $this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // You must add foreignKey ); } If you do not add foreignKey when changing the relationship name, you will see this error. Attempt to read property X on null How to insert data in one to one relationship in database? # After we created a One-To-One relationship between both Users table and Profiles table and added hasOne inside User Model, also we added the inverse relationship inside Profile Model by adding belongsTo to it.\nThe time has come to find out how the data is saved in the database while we use this relationship. And what are the methods used for that.\nThese methods are divided into three main ways:\nWithout using function profile. By using function profile. By using the inverse function user. 1. Without using function profile. # We go first to the file routes/web.php and add a new link so that we can test these methods. use App\\Models\\Profile; use App\\Models\\User; --- Route::get(\u0026#39;/one-to-one\u0026#39;, function () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;John Doe\u0026#39;]); Profile::create([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;John\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;08-11-1991\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); We open the browser and go to this link http://127.0.0.1:8000/one-to-one to find that the user has been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } 2. By using function profile. # We first go to the file routes/web.php and modify this link. Route::get(\u0026#39;/one-to-one\u0026#39;, function () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Tom Cruz\u0026#39;]); $user-\u0026gt;profile()-\u0026gt;create([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Tom\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Cruz\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-02-2000\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); We open the browser and go to this link again http://127.0.0.1:8000/one-to-one to find that the user has been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } 3. By using the inverse function user. # We first go to the file routes/web.php and modify this link. Route::get(\u0026#39;/one-to-one\u0026#39;, function () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Adam Smith\u0026#39;]); $profile = new Profile([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Adam\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Smith\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-01-1999\u0026#39; ]); $profile-\u0026gt;user()-\u0026gt;associate($user)-\u0026gt;save(); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $profile-\u0026gt;user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $profile-\u0026gt;lastname, ]); }); We open the browser and go to this link again http://127.0.0.1:8000/one-to-one to find that the user has been created successfully. { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } How do you get data into a One-To-One relationship in Laravel? # We have seen how data is saved in several different ways inside the database using the One-To-One relationship in Laravel.\nBut how is the data get from the database? There are several ways in which data can be get from the database.\nThese methods are divided into two main ways:\nwhile get users data. # While collecting user data, we will obtain their personal profiles. After that, the matter is divided in displaying that data between two forms, not a third. Determines the type of application you are working on, the theme used:\nFirst: an application based on web routes. Secondly: an application that depends on API routes. First: based on Web Routes. # We first go to the file routes/web.php and make the following modifications. Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); If we check the Response for this command, we will find that all data has been obtained from the database.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] Here you can choose only the columns we need in the following form.\nRoute::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile:firstname,lastname,user_id\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); If we now check again, you will find that the data size has been reduced.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } } ] Here we see the difference between the two cases in the size of the processed data, and the matter increases if the data is much larger than that. When choosing specific columns from relationships, you must choose the foreignKey column, because without choosing it, the data will not be returned correctly from the database.\nInside the folder views we add another folder named users and inside it we add the file list.blade.php and we add this simple table to display the users inside it . \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open your browser and go to the following link http://127.0.0.1:8000/users to see what results will appear. Users Table Second: based on Api Routes. # What is API Resources?\nSimply it is an intermediate layer between Eloquent and between the response of the API and the conversion of that data obtained from the database into JSON with the possibility of specifying specific data without others or manipulating that data.\nWe will create an API Resource for User, Profile. Execute this command at the command prompt. php artisan make:resource UserResource php artisan make:resource ProfileResource Go to the following path App/Http/Resources and modify both: File ProfileResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; $this-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $this-\u0026gt;lastname, ]; } } The file UserResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class UserResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;username\u0026#39; =\u0026gt; $this-\u0026gt;username, \u0026#39;profile\u0026#39; =\u0026gt; ProfileResource::make($this-\u0026gt;whenLoaded(\u0026#39;profile\u0026#39;)), ]; } } Go to your routes/api.php file and add a new link. use App\\Models\\User; use App\\Http\\Resources\\UserResource; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); $usersResource = UserResource::collection($users); return response()-\u0026gt;json($usersResource); }); Open your browser and go to the following link http://127.0.0.1:8000/api/users to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } } ] We also see here that we have obtained the required data specified within the API Resources files only.\nwhile get profiles data. # While obtaining profile data, we will obtain each user associated with those profiles. After that, the matter is divided in displaying that data between two forms, not a third. Determines the type of application you are working on, the theme used:\nFirst: an application based on web routes. Second: an application based on api routes. First: Based on Web Routes. # We first go to the file routes/web.php and make the following modifications. Route::get(\u0026#39;/profiles\u0026#39;, function () { $profiles = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); If we check the Response for this command, we will find that all data has been obtained from the database.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] Here we can select only the columns we need as follows.\nRoute::get(\u0026#39;/profiles\u0026#39;, function () { $profiles = Profile::with(\u0026#39;user:username,id\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); If we now check again, we will find that the data size has been reduced.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;id\u0026#34;: 3 } } ] When selecting specific columns in relationships, you must choose id while choosing the user relationship, because without choosing it, the user will not be returned with the profile.\nInside the folder views we add another folder named profiles and inside it we add the file list.blade.php and we add this simple table to display the profiles Inside. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($profiles as $profile) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Open your browser and go to the following link http://127.0.0.1:8000/profiles to see what results will appear. Profiles Table Second: Based on Api Routes. # Go to the following directory App/Http/Resources and edit the file ProfileResource.php: \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, \u0026#39;user\u0026#39; =\u0026gt; UserResource::make($this-\u0026gt;whenLoaded(\u0026#39;user\u0026#39;)), ]; } } Go to your routes/api.php file and add a new link. use App\\Models\\Profile; use App\\Http\\Resources\\ProfileResource; --- Route::get(\u0026#39;/profiles-resource\u0026#39;, function () { $profiles = Profile::with([\u0026#39;user\u0026#39;])-\u0026gt;get(); $profilesResource = ProfileResource::collection($profiles); return response()-\u0026gt;json($profilesResource); }); Open your browser and go to the following link http://127.0.0.1:8000/api/profiles to see what results will appear. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34; } } ] How to improve Eloquent queries in Laravel? # When dealing with a large database with a lot of data inside, here is a way to look at the matter from a different perspective.\nIt is not just about getting the data but how long it will take to get that data. How many queries will be executed per page.\nTo test this matter, we will download a very famous library called Laravel Debugbar. It will help us to know all the queries that are executed on each page.\n*Let\u0026rsquo;s run this command.\ncomposer require barryvdh/laravel-debugbar --dev Make sure that APP_DEBUG=true is inside the .env file.\nThe difference between the two cases: $users = User::all(); $users = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;get(); We open the browser and go to the following link http://127.0.0.1:8000/users to see what results will appear in the library bar. (Lazy Loading) - Get data without using with. laravel debugbar lazy loading At the bottom of the page, we will now find a bar for the Laravel Debugbar library. When you open it, we will find that it works with a lot of data. The thing that interests us here is the number of queries on this page, and as shown, they are 4 queries.\nAnd we only bring 3 users, imagine with me if there are tens of thousands or millions of users inside this database, the time to load this page will be very slow because of the huge number of queries.\nThis is called the N+1 problem in Laravel or it is called Lazy Loading.\nImagine, with 1000 users, 1001 database queries will be requested on this page only. This is a consumption of server resources. And also proof that your code is not professional.\n(Eager Loading) - Get data without using with. laravel debugbar eager loading As you can see, by adding the word with with the name of the relationship, each user\u0026rsquo;s data will be fetched with their own profile without a problem, N+1.\nSo the number of queries was reduced from 4 to 2 only, and this matter will clearly see its effect if this database, as we said, is of medium size or large, and this is what is called Eager Loading.\nHow to update one to one relationship in laravel? # Update data from the user\u0026rsquo;s discretion. # Using push function. We go first to the file routes/web.php and add this link. Route::get(\u0026#39;/users/update\u0026#39;, function () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $user-\u0026gt;profile-\u0026gt;lastname = \u0026#39;Doe Updated\u0026#39;; $user-\u0026gt;push(); return response()-\u0026gt;json($user); }); We open the browser and go to this new link http://127.0.0.1:8000/users/update to find that the user and profile have been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:44:19.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe Updated\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:44:19.000000Z\u0026#34; } } By Using update function. We first go to the file routes/web.php and modify this link. Route::get(\u0026#39;/users/update\u0026#39;, function () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;username = \u0026#39;John Doe\u0026#39;; $user-\u0026gt;save(); $user-\u0026gt;profile-\u0026gt;update([ \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39; ]); return response()-\u0026gt;json($user); ]); We open the browser and go to this new link http://127.0.0.1:8000/users/update to find that the user and profile have been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:46:11.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:46:11.000000Z\u0026#34; } } Update data by using profile. # By Using push function. We go first to the file routes/web.php and add this link. Route::get(\u0026#39;/profiles/update\u0026#39;, function () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $profile-\u0026gt;firstname = \u0026#39;John Updated\u0026#39;; $profile-\u0026gt;lastname = \u0026#39;Doe Updated\u0026#39;; $profile-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $profile-\u0026gt;push(); return response()-\u0026gt;json($profile); }); We open the browser and go to this new link http://127.0.0.1:8000/profiles/update to find that the user and profile have been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John Updated\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe Updated\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:02:31.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:02:31.000000Z\u0026#34; } } By Using update function. We first go to the file routes/web.php and modify this link. Route::get(\u0026#39;/profiles/update\u0026#39;, function () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $profile-\u0026gt;firstname = \u0026#39;John\u0026#39;; $profile-\u0026gt;lastname = \u0026#39;Doe\u0026#39;; $profile-\u0026gt;save(); $profile-\u0026gt;user-\u0026gt;update([ \u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Joun Doe\u0026#39; ]); return response()-\u0026gt;json($profile); ]); We open the browser and go to this new link http://127.0.0.1:8000/profiles/update to find that the user and profile have been updated successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;Joun Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34; } } How to delete data from one to one relationship in Laravel? # Delete data from the user\u0026rsquo;s. # We go first to the file routes/web.php and add this link. Route::get(\u0026#39;/users/profile/delete\u0026#39;, function () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;profile()-\u0026gt;delete(); return response()-\u0026gt;json($user); }); We will open the browser and go to this new link http://127.0.0.1:8000/users/profile/delete to find that the user\u0026rsquo;s profile has been deleted successfully. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;Joun Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: null } Refresh the page twice to show that this user\u0026rsquo;s profile has been deleted.\nDelete data from profile. # We go first to the file routes/web.php and add this link. Route::get(\u0026#39;/profiles/user/delete\u0026#39;, function () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;findOrFail(2); $profile-\u0026gt;delete(); $profile-\u0026gt;user()-\u0026gt;delete(); }); We will open the browser and go to this link http://127.0.0.1:8000/profiles/user/delete to find that both the user and the profile have been deleted successfully. Rcord has deleted Conclusion # This article is the start of a whole series on Laravel Eloquent Relationships - Relationships within Laravel. We have covered the One TO One relationship in a complete way. We did not spare you any information, and God willing, in the next explanation, we will learn about the One To Many relationship.\nYou can find the repo for this series on github here laravelspa/laravel-relations PHP 0 0 ","date":"10 August 2023","permalink":"/blog/laravel-eloquent-one-to-one-relationship-ultimate-guide-2023/","section":"Blogs","summary":"Often the developer needs to interact with databases. And if you are using the Laravel framework, you should know about the most important feature of Laravel, which is called Eloquent, the object relationship diagram (ORM) that makes this process simple and easy.","title":"Laravel Eloquent One-To-One Relationship - Ultimate Guide 2023"},{"content":"","date":"10 August 2023","permalink":"/series/laravel-eloquent-relationships/","section":"Series","summary":"","title":"Laravel Eloquent Relationships"},{"content":"","date":"10 August 2023","permalink":"/categories/laravel-relationships/","section":"Categories","summary":"","title":"Laravel Relationships"},{"content":"","date":"10 August 2023","permalink":"/","section":"Laravel SPA","summary":"","title":"Laravel SPA"},{"content":"","date":"10 August 2023","permalink":"/tags/laravel10/","section":"Tags","summary":"","title":"laravel10"},{"content":"","date":"10 August 2023","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"10 August 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"1 May 2023","permalink":"/tags/full-stack/","section":"Tags","summary":"","title":"full stack"},{"content":" Preview # Laravel 10 Vue 3 What is Laravel # Laravel is a web application framework with expressive, elegant syntax. A web framework provides a structure and starting point for creating your application, allowing you to focus on creating something amazing while we sweat the details. What is Vue js! # Vue is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript. It Helps you efficiently develop user interfaces, be they simple or complex. What is Vite js! # Vite is a build tool that aims to provide a faster and leaner development experience for modern web projects. It consists of two major parts:\nA dev server that provides rich feature enhancements over native ES modules, for example extremely fast Hot Module Replacement (HMR).\nA build command that bundles your code with Rollup, pre-configured to output highly optimized static assets for production. We conclude from the above that the most important thing that distinguishes vite is the speed at the start of the server, as well as making a bundle of files upon completion of the project. Step 1: Create New Laravel Project # composer create-project laravel/laravel laravel10-vue3 Step 2: How To Install Vue 3 on Laravel 10 # npm install npm install vue@next vue-loader@next Step 3: Install Plugin Vue From Vite # npm i @vitejs/plugin-vue Step 4: Edit File vite.config.js # // vite.config.js import { defineConfig } from \u0026#39;vite\u0026#39;; import laravel from \u0026#39;laravel-vite-plugin\u0026#39;; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; export default defineConfig({ plugins: [ vue(), laravel({ input: [\u0026#39;resources/css/app.css\u0026#39;, \u0026#39;resources/js/app.js\u0026#39;], refresh: true, }), ], }); Step 5: Edit File app.js Inside Folder resources/js # import {createApp} from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; createApp(App).mount(\u0026#34;#app\u0026#34;) Step 6: Create File app.blade.php Inside Folder resources/views # Make sure to add the css file and javascript as shown and also the div with id=app \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ str_replace(\u0026#39;_\u0026#39;, \u0026#39;-\u0026#39;, app()-\u0026gt;getLocale()) }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;ًApplication\u0026lt;/title\u0026gt; @vite(\u0026#39;resources/css/app.css\u0026#39;) \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; @vite(\u0026#39;resources/js/app.js\u0026#39;) \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Step 7: Create File App.vue Inside Folder resources/js # \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt; How To Install Vue 3 in Laravel 10 : Laravel SPA :) \u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; Step 8: Edit File web.php Inside Folder routes # \u0026lt;?php use Illuminate\\Support\\Facades\\Route; Route::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;app\u0026#39;); }) -\u0026gt;name(\u0026#39;application\u0026#39;); Step 9: Run PHP Local Server # php artisan serve Step 10: Run Node Local Server # npm run dev Go to the following link http://127.0.0.1:8000/ and you will find the following Laravel 10 Vue 3 You will find the repo for this project on github here [ laravelspa/laravel10-vue3 PHP 1 0 ","date":"1 May 2023","permalink":"/blog/how-to-install-vue3-in-laravel10-with-vite/","section":"Blogs","summary":"Preview # Laravel 10 Vue 3 What is Laravel # Laravel is a web application framework with expressive, elegant syntax. A web framework provides a structure and starting point for creating your application, allowing you to focus on creating something amazing while we sweat the details.","title":"How To Install Vue 3 In Laravel 10 With Vite"},{"content":"","date":"1 May 2023","permalink":"/tags/spa/","section":"Tags","summary":"","title":"spa"},{"content":"","date":"1 May 2023","permalink":"/tags/vue3/","section":"Tags","summary":"","title":"vue3"},{"content":"","date":"1 May 2023","permalink":"/categories/vuejs/","section":"Categories","summary":"","title":"Vuejs"},{"content":"Hi, this is Mahmoud Adel.\nWelcome to Laravel SPA: home of tutorials, videos and tips about Laravel framework. Started back in 2023 as a small personal blog, it grew into a hub of useful information for all levels.\nI also run a YouTube channel with the same name of Laravel SPA.\nYou can follow the latest Laravel tutorials on Twitter or by subscribing to our weekly newsletter.\nIf you want to get in touch, email dev.mahmoud.adel@gmail.com\n","date":"1 January 0001","permalink":"/about-us/","section":"Laravel SPA","summary":"Hi, this is Mahmoud Adel.\nWelcome to Laravel SPA: home of tutorials, videos and tips about Laravel framework. Started back in 2023 as a small personal blog, it grew into a hub of useful information for all levels.","title":"About Us"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":" Go to form ","date":"1 January 0001","permalink":"/contact-us/","section":"Laravel SPA","summary":" Go to form ","title":"Contact Us"},{"content":"At Laravel SPA, accessible from http://laravelspa.site, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by Laravel SPA and how we use it.\nIf you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.\nThis Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in Laravel SPA. This policy is not applicable to any information collected offline or via channels other than this website.\nConsent # By using our website, you hereby consent to our Privacy Policy and agree to its terms.\nInformation we collect # The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information. If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide. When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.\nHow we use your information # We use the information we collect in various ways, including to:\nProvide, operate, and maintain our website Improve, personalize, and expand our website Understand and analyze how you use our website Develop new products, services, features, and functionality Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the website, and for marketing and promotional purposes Send you emails Find and prevent fraud Log Files # Laravel SPA follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services\u0026rsquo; analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users\u0026rsquo; movement on the website, and gathering demographic information.\nCookies and Web Beacons # Like any other website, Laravel SPA uses \u0026ldquo;cookies\u0026rdquo;. These cookies are used to store information including visitors\u0026rsquo; preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users\u0026rsquo; experience by customizing our web page content based on visitors\u0026rsquo; browser type and/or other information.\nGoogle DoubleClick DART Cookie # Google is one of a third-party vendor on our site. It also uses cookies, known as DART cookies, to serve ads to our site visitors based upon their visit to www.website.com and other sites on the internet. However, visitors may choose to decline the use of DART cookies by visiting the Google ad and content network Privacy Policy at the following URL – https://policies.google.com/technologies/ads\nOur Advertising Partners # Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.\nGoogle https://policies.google.com/technologies/ads Advertising Partners Privacy Policies # You may consult this list to find the Privacy Policy for each of the advertising partners of Laravel SPA.\nThird-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on Laravel SPA, which are sent directly to users\u0026rsquo; browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.\nNote that Laravel SPA has no access to or control over these cookies that are used by third-party advertisers.\nThird Party Privacy Policies # Laravel SPA\u0026rsquo;s Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options.\nYou can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers\u0026rsquo; respective websites.\nCCPA Privacy Rights (Do Not Sell My Personal Information) # Under the CCPA, among other rights, California consumers have the right to: Request that a business that collects a consumer\u0026rsquo;s personal data disclose the categories and specific pieces of personal data that a business has collected about consumers. Request that a business delete any personal data about the consumer that a business has collected. Request that a business that sells a consumer\u0026rsquo;s personal data, not sell the consumer\u0026rsquo;s personal data. If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.\nGDPR Data Protection Rights # We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following: The right to access – You have the right to request copies of your personal data. We may charge you a small fee for this service. The right to rectification – You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete. The right to erasure – You have the right to request that we erase your personal data, under certain conditions. The right to restrict processing – You have the right to request that we restrict the processing of your personal data, under certain conditions. The right to object to processing – You have the right to object to our processing of your personal data, under certain conditions. The right to data portability – You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions. If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.\nChildren\u0026rsquo;s Information # Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.\nLaravel SPA does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.\nChanges to This Privacy Policy # We may update our Privacy Policy from time to time. Thus, we advise you to review this page periodically for any changes. We will notify you of any changes by posting the new Privacy Policy on this page. These changes are effective immediately, after they are posted on this page.\nContact Us # If you have any questions or suggestions about our Privacy Policy, do not hesitate to contact us.\n","date":"1 January 0001","permalink":"/privacy-policy/","section":"Laravel SPA","summary":"At Laravel SPA, accessible from http://laravelspa.site, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by Laravel SPA and how we use it.","title":"Privacy Policy"},{"content":"Thank you for reading my blog!\nSign up for my emil newsletter or use this RSS feed to get notified of new blog posts.\n","date":"1 January 0001","permalink":"/subscribe/","section":"Laravel SPA","summary":"Thank you for reading my blog!\nSign up for my emil newsletter or use this RSS feed to get notified of new blog posts.","title":"Subscribe Me"},{"content":"Welcome to Laravel SPA!\nThese terms and conditions outline the rules and regulations for the use of Laravel SPA\u0026rsquo;s Website, located at http://laravelspa.site.\nBy accessing this website we assume you accept these terms and conditions. Do not continue to use Laravel SPA if you do not agree to take all of the terms and conditions stated on this page.\nThe following terminology applies to these Terms and Conditions, Privacy Statement and Disclaimer Notice and all Agreements: \u0026ldquo;Client\u0026rdquo;, \u0026ldquo;You\u0026rdquo; and \u0026ldquo;Your\u0026rdquo; refers to you, the person log on this website and compliant to the Company\u0026rsquo;s terms and conditions. \u0026ldquo;The Company\u0026rdquo;, \u0026ldquo;Ourselves\u0026rdquo;, \u0026ldquo;We\u0026rdquo;, \u0026ldquo;Our\u0026rdquo; and \u0026ldquo;Us\u0026rdquo;, refers to our Company. \u0026ldquo;Party\u0026rdquo;, \u0026ldquo;Parties\u0026rdquo;, or \u0026ldquo;Us\u0026rdquo;, refers to both the Client and ourselves. All terms refer to the offer, acceptance and consideration of payment necessary to undertake the process of our assistance to the Client in the most appropriate manner for the express purpose of meeting the Client\u0026rsquo;s needs in respect of provision of the Company\u0026rsquo;s stated services, in accordance with and subject to, prevailing law of eg. Any use of the above terminology or other words in the singular, plural, capitalization and/or he/she or they, are taken as interchangeable and therefore as referring to same.\nCookies # We employ the use of cookies. By accessing Laravel SPA, you agreed to use cookies in agreement with the Laravel SPA\u0026rsquo;s Privacy Policy.\nMost interactive websites use cookies to let us retrieve the user\u0026rsquo;s details for each visit. Cookies are used by our website to enable the functionality of certain areas to make it easier for people visiting our website. Some of our affiliate/advertising partners may also use cookies.\nLicense # Unless otherwise stated, Laravel SPA and/or its licensors own the intellectual property rights for all material on Laravel SPA. All intellectual property rights are reserved. You may access this from Laravel SPA for your own personal use subjected to restrictions set in these terms and conditions.\nYou must not:\nRepublish material from Laravel SPA Sell, rent or sub-license material from Laravel SPA Reproduce, duplicate or copy material from Laravel SPA Redistribute content from Laravel SPA Parts of this website offer an opportunity for users to post and exchange opinions and information in certain areas of the website. Laravel SPA does not filter, edit, publish or review Comments prior to their presence on the website. Comments do not reflect the views and opinions of Laravel SPA,its agents and/or affiliates. Comments reflect the views and opinions of the person who post their views and opinions. To the extent permitted by applicable laws, Laravel SPA shall not be liable for the Comments or for any liability, damages or expenses caused and/or suffered as a result of any use of and/or posting of and/or appearance of the Comments on this website.\nLaravel SPA reserves the right to monitor all Comments and to remove any Comments which can be considered inappropriate, offensive or causes breach of these Terms and Conditions.\nYou warrant and represent that:\nYou are entitled to post the Comments on our website and have all necessary licenses and consents to do so; The Comments do not invade any intellectual property right, including without limitation copyright, patent or trademark of any third party; The Comments do not contain any defamatory, libelous, offensive, indecent or otherwise unlawful material which is an invasion of privacy The Comments will not be used to solicit or promote business or custom or present commercial activities or unlawful activity. You hereby grant Laravel SPA a non-exclusive license to use, reproduce, edit and authorize others to use, reproduce and edit any of your Comments in any and all forms, formats or media.\nHyperlinking to our Content # The following organizations may link to our Website without prior written approval:\nGovernment agencies; Search engines; News organizations; Online directory distributors may link to our Website in the same manner as they hyperlink to the Websites of other listed businesses; and System wide Accredited Businesses except soliciting non-profit organizations, charity shopping malls, and charity fundraising groups which may not hyperlink to our Web site. These organizations may link to our home page, to publications or to other Website information so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products and/or services; and (c) fits within the context of the linking party\u0026rsquo;s site.\nWe may consider and approve other link requests from the following types of organizations:\ncommonly-known consumer and/or business information sources; dot.com community sites; associations or other groups representing charities; online directory distributors; internet portals; accounting, law and consulting firms; and educational institutions and trade associations. We will approve link requests from these organizations if we decide that: (a) the link would not make us look unfavorably to ourselves or to our accredited businesses; (b) the organization does not have any negative records with us; (c) the benefit to us from the visibility of the hyperlink compensates the absence of Laravel SPA; and (d) the link is in the context of general resource information.\nThese organizations may link to our home page so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products or services; and (c) fits within the context of the linking party\u0026rsquo;s site.\nIf you are one of the organizations listed in paragraph 2 above and are interested in linking to our website, you must inform us by sending an e-mail to Laravel SPA. Please include your name, your organization name, contact information as well as the URL of your site, a list of any URLs from which you intend to link to our Website, and a list of the URLs on our site to which you would like to link. Wait 2-3 weeks for a response.\nApproved organizations may hyperlink to our Website as follows:\nBy use of our corporate name; or By use of the uniform resource locator being linked to; or By use of any other description of our Website being linked to that makes sense within the context and format of content on the linking party's site. No use of Laravel SPA\u0026rsquo;s logo or other artwork will be allowed for linking absent a trademark license agreement.\niFrames # Without prior approval and written permission, you may not create frames around our Webpages that alter in any way the visual presentation or appearance of our Website.\nContent Liability # We shall not be hold responsible for any content that appears on your Website. You agree to protect and defend us against all claims that is rising on your Website. No link(s) should appear on any Website that may be interpreted as libelous, obscene or criminal, or which infringes, otherwise violates, or advocates the infringement or other violation of, any third party rights.\nReservation of Rights # We reserve the right to request that you remove all links or any particular link to our Website. You approve to immediately remove all links to our Website upon request. We also reserve the right to amen these terms and conditions and it\u0026rsquo;s linking policy at any time. By continuously linking to our Website, you agree to be bound to and follow these linking terms and conditions.\nRemoval of links from our website # If you find any link on our Website that is offensive for any reason, you are free to contact and inform us any moment. We will consider requests to remove links but we are not obligated to or so or to respond to you directly.\nWe do not ensure that the information on this website is correct, we do not warrant its completeness or accuracy; nor do we promise to ensure that the website remains available or that the material on the website is kept up to date.\nDisclaimer # To the maximum extent permitted by applicable law, we exclude all representations, warranties and conditions relating to our website and the use of this website. Nothing in this disclaimer will:\nlimit or exclude our or your liability for death or personal injury; limit or exclude our or your liability for fraud or fraudulent misrepresentation; limit any of our or your liabilities in any way that is not permitted under applicable law; or exclude any of our or your liabilities that may not be excluded under applicable law. The limitations and prohibitions of liability set in this Section and elsewhere in this disclaimer: (a) are subject to the preceding paragraph; and (b) govern all liabilities arising under the disclaimer, including liabilities arising in contract, in tort and for breach of statutory duty.\nAs long as the website and the information and services on the website are provided free of charge, we will not be liable for any loss or damage of any nature.\n","date":"1 January 0001","permalink":"/terms-and-conditions/","section":"Laravel SPA","summary":"Welcome to Laravel SPA!\nThese terms and conditions outline the rules and regulations for the use of Laravel SPA\u0026rsquo;s Website, located at http://laravelspa.site.\nBy accessing this website we assume you accept these terms and conditions.","title":"Terms and Conditions"}]