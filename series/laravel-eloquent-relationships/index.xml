<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Laravel Eloquent Relationships on Laravel SPA</title><link>https://laravelspa.site/series/laravel-eloquent-relationships/</link><description>Recent content in Laravel Eloquent Relationships on Laravel SPA</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 20 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://laravelspa.site/series/laravel-eloquent-relationships/index.xml" rel="self" type="application/rss+xml"/><item><title>How to delete data from one to many relationship in Laravel?</title><link>https://laravelspa.site/blog/how-to-delete-data-from-one-to-many-relationship-in-laravel/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/how-to-delete-data-from-one-to-many-relationship-in-laravel/</guid><description>How to delete data from one-to-many relationship in Laravel? Delete data using the user form. # First go to routes/web.php file and add this route: Route::get(&amp;#39;/users/posts/delete&amp;#39;, function () { $user = User::with(&amp;#39;posts&amp;#39;)-&amp;gt;find(1); $user-&amp;gt;posts()-&amp;gt;whereIn(&amp;#39;id&amp;#39;, [1, 2])-&amp;gt;delete(); return response()-&amp;gt;json($user); }); We open the browser and go to the new URL http://127.</description></item><item><title>How to update a one-to-many relationship in Laravel?</title><link>https://laravelspa.site/blog/how-to-update-a-one-to-many-relationship-in-laravel/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/how-to-update-a-one-to-many-relationship-in-laravel/</guid><description>How to update one to many relationship in Laravel? Update data using the user form. # Using push method. First go to routes/web.php file and modify this route: Route::get(&amp;#39;/users/update&amp;#39;, method () { $user = User::with(&amp;#39;posts&amp;#39;)-&amp;gt;find(1); $post = $user-&amp;gt;posts()-&amp;gt;whereId(1)-&amp;gt;first(); $post-&amp;gt;title = &amp;#39;Post title 1 updated&amp;#39;; $post-&amp;gt;push(); return response()-&amp;gt;json($user); }); We open the browser and go to the new URL http://127.</description></item><item><title>How can you retrieve data from a one-to-many relationship in Laravel?</title><link>https://laravelspa.site/blog/how-can-you-retrieve-data-from-a-one-to-many-relationship-in-laravel/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/how-can-you-retrieve-data-from-a-one-to-many-relationship-in-laravel/</guid><description>How do you retrieve data from one to many relationship in Laravel? We saw how data is saved in multiple different ways within the database using the One-To-Many relationship in Laravel.</description></item><item><title>How to insert data in one to many relationship in database?</title><link>https://laravelspa.site/blog/how-to-insert-data-in-one-to-many-relationship-in-database/</link><pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/how-to-insert-data-in-one-to-many-relationship-in-database/</guid><description>How to insert data in a one-to-many relationship in the database? After we created a One-To-Many relationship between both Users table and Posts table and added hasMany inside User Model, also we added the inverse relationship inside Post Model by adding belongsTo to it.</description></item><item><title>How to create a One-To-Many relationship in Laravel?</title><link>https://laravelspa.site/blog/how-to-create-a-one-to-many-relationship-in-laravel/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/how-to-create-a-one-to-many-relationship-in-laravel/</guid><description>After we learned about the types of relationships within Laravel in the previous part. We discussed the first type of these relationships, which is the One-To-One relationship.
Today we continue the series we started learning about Laravel Eloquent Relationships.</description></item><item><title>How to delete data from one to one relationship in Laravel?</title><link>https://laravelspa.site/blog/how-to-delete-data-from-one-to-one-relationship-in-laravel/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/how-to-delete-data-from-one-to-one-relationship-in-laravel/</guid><description>How to delete data from one to one relationship in Laravel? Delete data using User Model. # We first go to the routes/web.php file and add this route: Route::get(&amp;#39;/users/profile/delete&amp;#39;, method () { $user = User::with(&amp;#39;profile&amp;#39;)-&amp;gt;find(1); $user-&amp;gt;profile()-&amp;gt;delete(); return response()-&amp;gt;json($user); }); We open the browser and navigate to the new URL http://127.</description></item><item><title>How to update a one-to-one relationship in Laravel?</title><link>https://laravelspa.site/blog/how-to-update-a-one-to-one-relationship-in-laravel/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/how-to-update-a-one-to-one-relationship-in-laravel/</guid><description>How to update one to many relationship in Laravel? Update data using the user form. # Using push method. First go to routes/web.php file and modify this route: Route::get(&amp;#39;/users/update&amp;#39;, method () { $user = User::with(&amp;#39;posts&amp;#39;)-&amp;gt;find(1); $post = $user-&amp;gt;posts()-&amp;gt;whereId(1)-&amp;gt;first(); $post-&amp;gt;title = &amp;#39;Post title 1 updated&amp;#39;; $post-&amp;gt;push(); return response()-&amp;gt;json($user); }); We open the browser and go to the new URL http://127.</description></item><item><title>How can you retrieve data from a one-to-one relationship in Laravel?</title><link>https://laravelspa.site/blog/how-can-you-retrieve-data-from-a-one-to-one-relationship-in-laravel/</link><pubDate>Sun, 13 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/how-can-you-retrieve-data-from-a-one-to-one-relationship-in-laravel/</guid><description>How can you retrieve data from a one-to-one relationship in Laravel? We have seen how data is saved in several different ways in the database using the one-to-one relationship in Laravel.</description></item><item><title>How to insert data in one to one relationship in database?</title><link>https://laravelspa.site/blog/how-to-insert-data-in-one-to-one-relationship-in-database/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/how-to-insert-data-in-one-to-one-relationship-in-database/</guid><description>How to insert data in one to one relationship in database? After we created a one-to-one relationship between the users table and the profiles table, and added the hasOne() method to the User model, and the belongsTo() method to the Profile model, it&amp;rsquo;s time to find out how the data is saved in the database when we use this relationship.</description></item><item><title>How to create a One-To-One relationship in Laravel?</title><link>https://laravelspa.site/blog/how-to-create-a-one-to-one-relationship-in-laravel/</link><pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/how-to-create-a-one-to-one-relationship-in-laravel/</guid><description>How to create a One-To-One relationship in Laravel? One-to-One relationships are the simplest type of relationship offered by Laravel. They join two tables such that one row in the first table is associated with only one row in the other table, or the same table.</description></item><item><title>What types of relationships are there in Laravel?</title><link>https://laravelspa.site/blog/what-types-of-relationships-are-there-in-laravel/</link><pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><guid>https://laravelspa.site/blog/what-types-of-relationships-are-there-in-laravel/</guid><description>Often, developers need to interact with databases. If you are using the Laravel framework, you should know about one of its most important features: Eloquent, an object-relational mapper (ORM) that makes this process simple and easy.</description></item></channel></rss>