[{"content":"","date":"10 أغسطس 2023","permalink":"/ar/blog/","section":"Blogs","summary":"","title":"Blogs"},{"content":"","date":"10 أغسطس 2023","permalink":"/ar/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"10 أغسطس 2023","permalink":"/ar/tags/eloquent/","section":"Tags","summary":"","title":"eloquent"},{"content":"","date":"10 أغسطس 2023","permalink":"/ar/tags/eloquent-relationships/","section":"Tags","summary":"","title":"eloquent relationships"},{"content":"","date":"10 أغسطس 2023","permalink":"/ar/categories/laravel/","section":"Categories","summary":"","title":"Laravel"},{"content":"غالبًا ما يحتاج المطور أن يتفاعل مع قواعد البيانات. وإذا كنت تستخدم إطار عمل Laravel فيجب علبك أن تتعرف على أهم مميزات لارافيل وهو ما يسمى Eloquent , مخطط علاقات الكائنات (ORM) الذى يجعل هذه العملية بسيطة وسهلة.\nيعد Laravel Eloquent أحد الميزات الرئيسية في إطار عمل لارافيل. ويرجع ذلك إلى دعمه الرائع فى تحديد وإنشاء وإدارة العلاقات بين جداول البيانات المختلفة. سأوضح لك في هذه السلسلة من المقالات كيفية إنشاء واستخدام علاقات Eloquent.\nمع ملاحظة أنه يمكنك البدء دون أي معرفة سابقة بالعلاقات.\nlaravel one to one relationship من الضروري كمبرمج محترف أن تدرك أنواع العلاقات ولكن قبل هذا يجب أن تسأل نفسك سؤالاً هاماً ما هى العلاقات من الأساس؟\nما هي العلاقات فى قواعد البيانات؟ # ما هي العلاقات فى قواعد البيانات? عند العمل مع جداول في قاعدة بيانات يوجد بينها علاقات , يمكننا وصف هذه العلاقات على أنها اتصالات بين تلك الجداول. يساعدك هذا في تنظيم البيانات وهيكلتها دون عناء مما يتيح إمكانية قراءة ومعالجة للبيانات بشكل أسرع.\nما هي أنواع العلاقات الموجودة فى Laravel؟ # ما هي أنواع العلاقات الموجودة فى Laravel؟ هناك ثلاثة أنواع رئيسية من العلاقات فى قواعد البيانات تظهر عند الممارسة:\none-to-one: وهو ارتباط سجل واحد فقط بسجل أخر. ومثال على ذلك أن كل مستخدم يمتلك ملف تعريف واحد خاص به. one-to-many: وهو ارتباط سجل واحد فقط بأكثر من سجل أخر ومثال على ذلك أن كل كاتب يمتلك أكثر من مقال. many-to-many: وهو ارتباط أكثر من سجل بأكثر من سجل أخر ومثال على ذلك أنه يمكن لأكثر من مستخدم الانضمام إلى أكثر من دورة واحدة. إلى جانب هذه العلاقات , تقدم Laravel المزيد من العلاقات , وهي:\nHas Many Through Polymorphic Relations Many-to-many Polymorphic ليصبح عدد العلاقات التى سنقوم بشرحها هم 6 أنواع. وسنقوم ببناء نظام إدارة محتوى بسيط لشرح جميع تلك العلاقات.\nهل أحتاج إلى معرفة خاصة بـ Eloquent قبل قراءة هذا؟\nفي الأمثلة أدناه, حاولت أن أشرح كل شيء بأكبر قدر ممكن من الوضوح, دون استخدام الكثير من وظائف Eloquent الصعبة والتقنيات المعقدة. هذا يعني أن المعرفة السابقة ليست ضرورية تمامًاً.\nومع ذلك من الأفضل دائمًاً تعلم الأساسيات أولاً ثم متابعة موضوعات أكثر تعقيدًاً مثل العلاقات.\nكيف تنشئ علاقة One-To-One فى لارافيل؟ # كيف تنشئ علاقة One-To-One فى لارافيل؟ نظرًا لكونها أول علاقة أساسية وأبسطها تقدمها Laravel , فإنه يتم ربط جدولين بحيث يرتبط صف واحد من الجدول الأول بصف واحد فقط من الجدول الآخر, أو بنفس الجدول.\nلرؤية هذا كتطبيق عملى سنبدأ بإنشاء نظام إدارة المحتوى,\nلنفترض أن كل مستخدم له ملف تعريف واحد خاص به. في بعض الحالات , يمكنك تخزين جميع معلومات الملف الشخصي في جدول المستخدمين. لكن هذا لن يكون مثاليًا.\nفي المثال الخاص بنا نريد إنشاء جدول منفصل خاص بملفات التعريف الشخصية ,إذا أردنا لاحقًا نقل ملف تعريف من مستخدم إلى أخر فسيكون هذا متاحاً.\nافتراضيا جدول المستخدمين موجود ولا يهم الأعمدة التى سيحتويها.\nلنقل أن لدينا جدول للمستخدمين يتكون من الأعمدة التالية: Schema::create(\u0026#39;users\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;username\u0026#39;); $table-\u0026gt;string(\u0026#39;email\u0026#39;)-\u0026gt;unique(); $table-\u0026gt;timestamps(); }); نقوم بتعديل ملف User.php. protected $fillable = [\u0026#39;username\u0026#39;]; نقوم بإنشاء Profile Model مع الجدول الخاص به. php artisan make:model Profile -m فى علاقة One-to-One لدينا الحرية فى اختيار احد هاتين الطريقتين:\nإضافة user_id فى جدول profiles. إضافة profile_id فى جدول users. وفي الغالب يتم دائمًا إضافة هذا العمود الذي يربط بين الجدولين إلى الجدول الثاني , لذلك سنضيفه إلى جدول الملفات الشخصية على النحو التالي.\nSchema::create(\u0026#39;profiles\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;firstname\u0026#39;); $table-\u0026gt;string(\u0026#39;lastname\u0026#39;); $table-\u0026gt;string(\u0026#39;birthday\u0026#39;); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); نقوم بتعديل ملف Profile.php. protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;firstname\u0026#39;, \u0026#39;lastname\u0026#39;, \u0026#39;birthday\u0026#39; ]; لنقم بتنفيذ هذا الأمر لتحديث قاعدة البيانات. php artisan migrate لنتوجه الى ملف User.php لنقم بتعيين العلاقة. public function profile() { return $this-\u0026gt;hasOne(Profile::class); } لنتعرف كيف تعمل hasOne\n$this-\u0026gt;hasOne(Profile::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // localKey =\u0026gt; Primary Key In Parent Table By Default is Id ); لنتوجه الى ملف Profile.php لنقم بتعيين العلاقة العكسية. public function user() { return $this-\u0026gt;belongsTo(User::class); } لنتعرف كيف تعمل belongsTo.\n$this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // OwnerKey By Default Id ); لنقل أنك تريد تسمية العلاقة بإسم أخر مثل admin فيجب علينا إضافة foreignKey.\npublic function admin() { return $this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // You must add foreignKey ); } وإذا لم تقم بإضافة foreignKey عند تغيير أسم العلاقة سيظهر لك هذا الخطأ. Attempt to read property X on null كيفية حفظ البيانات فى علاقة one to one فى Laravel؟ # كيفية حفظ البيانات فى علاقة one to one فى Laravel؟ بعد أن قمنا بإنشاء علاقة One-To-One بين كلا من جدول المستخدمين وجدول ملفات التعريف وأضفنا hasOne داخل User Model, وأيضا قمنا بإضافة العلاقة العكسية داخل Profile Model بإضافة belongsTo إليه.\nجاء الوقت لمعرفة كيف يتم حفظ البيانات فى قاعدة البيانات أثناء إستخدامنا لهذه العلاقة. وما هى الطرق المستخدمة فى ذلك\nتنقسم هذه الطرق الى ثلاث طرق اساسية:\nبدون إستخدام function profile. عن طريق إستخدام function profile. عن طريق إستخدام العلاقة العكسية function user. 1. بدون إستخدام function profile. # نقوم بالتوجه أولا لملف routes/web.php و نضيف رابط جديد حتى نستطيع أن نختبر هذه الطرق. use App\\Models\\Profile; use App\\Models\\User; --- Route::get(\u0026#39;/one-to-one\u0026#39;, function () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;John Doe\u0026#39;]); Profile::create([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;John\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;08-11-1991\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); نقوم بفتح المتصفح والذهاب الى هذا الرابط http://127.0.0.1:8000/one-to-one لنجد أنه تم إنشاء المستخدم بنجاح. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } 2. بإستخدام function profile. # نقوم بالتوجه أولا لملف routes/web.php و نقوم بالتعديل على هذا الرابط. Route::get(\u0026#39;/one-to-one\u0026#39;, function () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Tom Cruz\u0026#39;]); $user-\u0026gt;profile()-\u0026gt;create([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Tom\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Cruz\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-02-2000\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); نقوم بفتح المتصفح والذهاب الى هذا الرابط مرة أخرى http://127.0.0.1:8000/one-to-one لنجد أنه تم إنشاء المستخدم بنجاح. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } 3. عن طريق إستخدام العلاقة العكسية function user مع associate. # نقوم بالتوجه أولا لملف routes/web.php و نقوم بالتعديل على هذا الرابط. Route::get(\u0026#39;/one-to-one\u0026#39;, function () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Adam Smith\u0026#39;]); $profile = new Profile([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Adam\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Smith\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-01-1999\u0026#39; ]); $profile-\u0026gt;user()-\u0026gt;associate($user)-\u0026gt;save(); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $profile-\u0026gt;user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $profile-\u0026gt;lastname, ]); }); نقوم بفتح المتصفح والذهاب الى هذا الرابط مرة أخرى http://127.0.0.1:8000/one-to-one لنجد أنه تم إنشاء المستخدم بنجاح. { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } كيف تحصل على البيانات في علاقة One-To-One في Laravel؟ # كيف تحصل على البيانات في علاقة One-To-One في Laravel؟ رأينا كيف يتم حفظ البيانات بطرق مختلفة ومتعددة داخل قاعدة البيانات بإستخدام علاقة One-To-One فى Laravel.\nولكن كيف يتم الحصول على البيانات من قاعدة البيانات؟ هناك عدة طرق يمكن من خلالها الحصول على البيانات من قاعدة البيانات.\nوتنقسم هذه الطرق الى طريقتين أساسيتين:\nأثناء الحصول على بيانات المستخدمين. # أثناء الحصول على بيانات المستخدمين سنقوم بالحصول على ملفات التعريف الشخصية الخاصة بهم. بعد ذلك ينقسم الأمر فى عرض تلك البيانات بين شكلين لا ثالث لهم. يحدد نوع التطبيق الذى تعمل عليه الشكل المستخدم:\nأولا: تطبيق يعتمد على web routes. ثانياً: تطبيق يعتمد على api routes. أولاً: الإعتماد على Web Routes. # نقوم بالتوجه أولا لملف routes/web.php ونقوم بالتعديلات التالية. Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); إذا قمنا بفحص Response (الأستجابة) الخاصة بهذا الأمر سنجد أن جميع البيانات تم الحصول عليها من قاعدة البيانات.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] هنا يمكننا اختيار الاعمده التى نحتاجها فقط بالشكل التالي.\nRoute::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile:firstname,lastname,user_id\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); أذا قمنا الأن بالفحص مرة أخرى سنجد أن حجم البيانات تم تقليصه.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } } ] وهنا نرى الفرق بين الحالتين فى حجم البيانات التى تمت معالجتها ويزداد الأمر إذا كانت البيانات حجمها أكبر من ذلك بكثير. يجب عند إختيار إعمدة محددة من العلاقات أن تختار عمود foreignKey لأن بدون إختيارك له لن تعود البيانات بشكل صحيح من قاعدة البيانات.\nداخل فولدر views نقوم بإضافة فولدر أخر أسمه users وبداخله نقوم بإضافة ملف list.blade.php ونقوم بإضافة هذا الجدول البسيط لعرض المستخدمين بداخله. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; قم بفتح المتصفح والذهاب الى الرابط التالى http://127.0.0.1:8000/users لنرى ما هى النتائج التى ستظهر. Users Table ثانياً: الإعتماد على Api Routes. # ما هو API Resources?\nببساطة هى طبقة وسيطة بين Eloquent وما بين الإستجابة الخاصة ب API وتحويل تلك البيانات التى تم الحصول علىها من قاعدة البيانات الى JSON مع امكانية تحديد بيانات محددة دون غيرها أو التلاعب تلك البيانات.\nسنقوم بإنشاء API Resource لكل من User, Profile قم تنفيذ هذا الأمر فى موجه الأوامر. php artisan make:resource UserResource php artisan make:resource ProfileResource قم بالذهاب الى المسار التالى App/Http/Resources والتعديل على كلا من: ملف ProfileResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; $this-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $this-\u0026gt;lastname, ]; } } ملف UserResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class UserResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;username\u0026#39; =\u0026gt; $this-\u0026gt;username, \u0026#39;profile\u0026#39; =\u0026gt; ProfileResource::make($this-\u0026gt;whenLoaded(\u0026#39;profile\u0026#39;)), ]; } } قم بالتوجه ألى ملف routes/api.php وإضافة رابط جديد. use App\\Models\\User; use App\\Http\\Resources\\UserResource; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); $usersResource = UserResource::collection($users); return response()-\u0026gt;json($usersResource); }); قم بفتح المتصفح والذهاب الى الرابط التالى http://127.0.0.1:8000/api/users لنرى ما هى النتائج التى ستظهر. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } } ] ونرى هنا أيضا أننا قمنا نالحصول على البيانات المطلوبة والمحددة داهل ملفات API Resources فقط.\nأثناء الحصول على بيانات ملفات التعريف الشخصية. # أثناء الحصول على بيانات الملفات الشخصية سنقوم بالحصول على كل مستخدم مرتبط بتلك الملفات. بعد ذلك ينقسم الأمر فى عرض تلك البيانات بين شكلين لا ثالث لهم. يحدد نوع التطبيق الذى تعمل عليه الشكل المستخدم:\nأولا: تطبيق يعتمد على web routes. ثانياً: تطبيق يعتمد على api routes. أولاً: الإعتماد على Web Routes. # نقوم بالتوجه أولا لملف routes/web.php ونقوم بالتعديلات التالية. Route::get(\u0026#39;/profiles\u0026#39;, function () { $profiles = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); إذا قمنا بفحص Response (الأستجابة) الخاصة بهذا الأمر سنجد أن جميع البيانات تم الحصول عليها من قاعدة البيانات.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] هنا يمكننا اختيار الاعمده التى نحتاجها فقط بالشكل التالي.\nRoute::get(\u0026#39;/profiles\u0026#39;, function () { $profiles = Profile::with(\u0026#39;user:username,id\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); أذا قمنا الأن بالفحص مرة أخرى سنجد أن حجم البيانات تم تقليصه.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;id\u0026#34;: 3 } } ] يجب عند إختيار إعمدة محددة فى العلاقات أن تختار id وأنت تختار علاقة user لأن بدون إختيارك له لن يعود المستخدم مع ملف التعريف.\nداخل فولدر views نقوم بإضافة فولدر أخر أسمه profiles وبداخله نقوم بإضافة ملف list.blade.php ونقوم بإضافة هذا الجدول البسيط لعرض الملفات الضخصية بداخله. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($profiles as $profile) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; قم بفتح المتصفح والذهاب الى الرابط التالى http://127.0.0.1:8000/profiles لنرى ما هى النتائج التى ستظهر. Profiles Table ثانياً: الإعتماد على Api Routes. # قم بالذهاب الى المسار التالى App/Http/Resources والتعديل على ملف ProfileResource.php: \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, \u0026#39;user\u0026#39; =\u0026gt; UserResource::make($this-\u0026gt;whenLoaded(\u0026#39;user\u0026#39;)), ]; } } قم بالتوجه ألى ملف routes/api.php وإضافة رابط جديد. use App\\Models\\Profile; use App\\Http\\Resources\\ProfileResource; --- Route::get(\u0026#39;/profiles-resource\u0026#39;, function () { $profiles = Profile::with([\u0026#39;user\u0026#39;])-\u0026gt;get(); $profilesResource = ProfileResource::collection($profiles); return response()-\u0026gt;json($profilesResource); }); قم بفتح المتصفح والذهاب الى الرابط التالى http://127.0.0.1:8000/api/profiles لنرى ما هى النتائج التى ستظهر. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34; } } ] كيفية تحسين استعلامات Eloquent في Laravel؟ # كيفية تحسين استعلامات Eloquent في Laravel؟ عند التعامل مع قاعدة بيانات كبيرة بداخلها الكثير من البيانات هنا لتنظر للأمر بنظرة مختلفة.\nفالأمر ليس مجرد الحصول على البيانات ولكن كم من الوقت سيستغرق للحصول على تلك البيانات. وكم عدد الإستعلامات التى ستنفذ فى كل صفحة.\nولإختبار هذا الأمر سنقوم بتنزيل مكتبة مشهورة جدا اسمها Laravel Debugbar. ستساعدنا فى معرفة جميع الإستعلامات التى تنفذ فى كل صفحة.\nلنقم بتنفيذ هذا الأمر. composer require barryvdh/laravel-debugbar --dev وتأكد أن APP_DEBUG=true داخل ملف .env.\nالفرق بين الحالتين: $users = User::all(); $users = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;get(); نقوم بفتح المتصفح والذهاب الى الرابط التالى http://127.0.0.1:8000/users لنرى ما هى النتائج التى ستظهر فى الشريط الخاص بالمكتبة. (Lazy Loading) - الحصول على البيانات بدون إستخدام with. laravel debugbar lazy loading سنجد الأن أسفل الصفحة شريط يخص مكتبة Laravel Debugbar عند فتحه سنجد أنه يعملنا بكثير من البيانات. الأمر الذى يهمنا هنا هو عدد الإستعلامات الموجوده فى هذه الصفحة وكما هو موضح فهم 4 إستعلامات.\nونحن نفوم بجلب 3 مستخدمين فقط, تخيل معى لو داخل قاعدة البيانات هذه عشران الألاف او ملايين المستخدمين سيكون وقت تحميل هذه الصفحة بظئ جدا بسبب عدد الإستعلامات الضخم.\nوهذا ما يسمى بمشكلة N+1 فى Laravel أو ما يطلق عليه Lazy Loading.\nفتخيل مع 1000 مستخدم سيتم طلب 1001 إستعلام لقاعدة البيانات فى هذه الصفحة فقط. وهذا يعتبر إستهلاك لموارد السيرفر. وأيضا دليل على عدم إحترافية الكود الخاص بك.\n(Eager Loading) - الحصول على البيانات بدون إستخدام with. laravel debugbar eager loading وكما ترى بإضافة كلمة with مع أسم العلاقة سيتم جلب بيانات كل مستخدم مع الملف الشخصى الخاص به بدون مشكلة N+1.\nفتم تقليص عدد الإستعلامات من 4 الى 2 فقط وهذا الأمر سترى تأثيره بشكل واضح إذا كانت قاعدة البيانات هذه كما قلنا متوسطة الحجم او كبيرة وهذا ما يطلق عليه Eager Loading.\nكيفية تحديث علاقة one to one فى Laravel؟ # كيفية تحديث علاقة one to one فى Laravel؟ تحديث البيانات من ناحية المستخدم. # إستخدام push function. نقوم بالتوجه أولا لملف routes/web.php و نقوم بإضافة هذا الرابط. Route::get(\u0026#39;/users/update\u0026#39;, function () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $user-\u0026gt;profile-\u0026gt;lastname = \u0026#39;Doe Updated\u0026#39;; $user-\u0026gt;push(); return response()-\u0026gt;json($user); }); نقوم بفتح المتصفح والذهاب الى هذا الرابط الجديد http://127.0.0.1:8000/users/update لنجد أنه تم تحديث المستخدم وملف التعريف بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:44:19.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe Updated\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:44:19.000000Z\u0026#34; } } إستخدام update function. نقوم بالتوجه أولا لملف routes/web.php و نقوم بالتعديل على هذا الرابط. Route::get(\u0026#39;/users/update\u0026#39;, function () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;username = \u0026#39;John Doe\u0026#39;; $user-\u0026gt;save(); $user-\u0026gt;profile-\u0026gt;update([ \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39; ]); return response()-\u0026gt;json($user); ]); نقوم بفتح المتصفح والذهاب الى هذا الرابط الجديد http://127.0.0.1:8000/users/update لنجد أنه تم تحديث المستخدم وملف التعريف بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:46:11.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:46:11.000000Z\u0026#34; } } تحديث البيانات من ناحية ملف التعريف الشخصى. # إستخدام push function. نقوم بالتوجه أولا لملف routes/web.php و نقوم بإضافة هذا الرابط. Route::get(\u0026#39;/profiles/update\u0026#39;, function () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $profile-\u0026gt;firstname = \u0026#39;John Updated\u0026#39;; $profile-\u0026gt;lastname = \u0026#39;Doe Updated\u0026#39;; $profile-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $profile-\u0026gt;push(); return response()-\u0026gt;json($profile); }); نقوم بفتح المتصفح والذهاب الى هذا الرابط الجديد http://127.0.0.1:8000/profiles/update لنجد أنه تم تحديث المستخدم وملف التعريف بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John Updated\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe Updated\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:02:31.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:02:31.000000Z\u0026#34; } } إستخدام update function. نقوم بالتوجه أولا لملف routes/web.php و نقوم بالتعديل على هذا الرابط. Route::get(\u0026#39;/profiles/update\u0026#39;, function () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $profile-\u0026gt;firstname = \u0026#39;John\u0026#39;; $profile-\u0026gt;lastname = \u0026#39;Doe\u0026#39;; $profile-\u0026gt;save(); $profile-\u0026gt;user-\u0026gt;update([ \u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Joun Doe\u0026#39; ]); return response()-\u0026gt;json($profile); ]); نقوم بفتح المتصفح والذهاب الى هذا الرابط الجديد http://127.0.0.1:8000/profiles/update لنجد أنه تم تحديث المستخدم وملف التعريف بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;Joun Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34; } } كيفية حذف البيانات من علاقة one to one فى Laravel؟ # كيفية حذف البيانات من علاقة one to one فى Laravel؟ حذف البيانات من ناحية المستخدم. # نقوم بالتوجه أولا لملف routes/web.php و نقوم بإضافة هذا الرابط. Route::get(\u0026#39;/users/profile/delete\u0026#39;, function () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;profile()-\u0026gt;delete(); return response()-\u0026gt;json($user); }); سنقوم بفتح المتصفح والذهاب الى هذا الرابط الجديد http://127.0.0.1:8000/users/profile/delete لنجد أنه تم حذف ملف التعريف الخاص بالمستخدم بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;Joun Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: null } قم بعمل تحديث للصفحة مرتان لتظهر لك أنه تم حذف ملف التعريف الخاص بهذا المستخدم\nحذف البيانات من ناحية ملف التعريف الشخصى. # نقوم بالتوجه أولا لملف routes/web.php و نقوم بإضافة هذا الرابط. Route::get(\u0026#39;/profiles/user/delete\u0026#39;, function () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;findOrFail(2); $profile-\u0026gt;delete(); $profile-\u0026gt;user()-\u0026gt;delete(); }); سنقوم بفتح المتصفح والذهاب الى هذا الرابط http://127.0.0.1:8000/profiles/user/delete لنجد أنه تم حذف كلاً من المستخدم وملف التعريف بنجاح. Rcord has deleted الخاتمة # هذه المقالة هى بداية لسلسلة كاملة عن Laravel Eloquent Relationships - العلاقات داخل Laravel. وقد تناولنا فيها علاقة One TO One بطريقة كاملة. ولم نبخل عليكم بأى معلوم, وإن شاء الله فى الشرح القادم سنتعرف على علاقة One To Many. وفى الختام نصلى على رسول الله سيدنا محمد وعلى اُله وصحبه أجمعين.\nستجد repo الخاصة بهذه السلسلة على github هنا laravelspa/laravel-relations PHP 0 0 ","date":"10 أغسطس 2023","permalink":"/ar/blog/laravel-eloquent-one-to-one-relationship-ultimate-guide-2023-in-arabic/","section":"Blogs","summary":"غالبًا ما يحتاج المطور أن يتفاعل مع قواعد البيانات. وإذا كنت تستخدم إطار عمل Laravel فيجب علبك أن تتعرف على أهم مميزات لارافيل وهو ما يسمى Eloquent , مخطط علاقات الكائنات (ORM) الذى يجعل هذه العملية بسيطة وسهلة.","title":"Laravel Eloquent One-To-One Relationship - Ultimate Guide 2023 In Arabic"},{"content":"","date":"10 أغسطس 2023","permalink":"/ar/series/laravel-eloquent-relationships/","section":"Series","summary":"","title":"Laravel Eloquent Relationships"},{"content":"","date":"10 أغسطس 2023","permalink":"/ar/categories/laravel-relationships/","section":"Categories","summary":"","title":"Laravel Relationships"},{"content":"","date":"10 أغسطس 2023","permalink":"/ar/","section":"Laravel SPA","summary":"","title":"Laravel SPA"},{"content":"","date":"10 أغسطس 2023","permalink":"/ar/tags/laravel10/","section":"Tags","summary":"","title":"laravel10"},{"content":"","date":"10 أغسطس 2023","permalink":"/ar/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"10 أغسطس 2023","permalink":"/ar/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"8 مايو 2023","permalink":"/ar/tags/full-stack/","section":"Tags","summary":"","title":"full stack"},{"content":"","date":"8 مايو 2023","permalink":"/ar/tags/spa/","section":"Tags","summary":"","title":"spa"},{"content":"","date":"8 مايو 2023","permalink":"/ar/tags/vue3/","section":"Tags","summary":"","title":"vue3"},{"content":"","date":"8 مايو 2023","permalink":"/ar/categories/vuejs/","section":"Categories","summary":"","title":"Vuejs"},{"content":" عرض المشروع # Laravel 10 Vue 3 ما هو إطار عمل Laravel # Laravel هو إطار عمل لتطبيق ويب ذو بناء مرتب وأنيق. يوفر إطار عمل الويب هيكلًا ونقطة بداية لإنشاء تطبيقك ، مما يسمح لك بالتركيز على إنشاء شيء مذهل بينما تهتم بالتفاصيل. ما هى Vue js! # Vue هو إطار عمل JavaScript لبناء واجهات المستخدم. يعتمد على HTML و CSS و JavaScript. يساعدك على تطوير واجهات المستخدم بكفاءة ، سواء كانت بسيطة أو معقدة. ما هى Vite js! # Vite هي أداة بناء تهدف إلى توفير تجربة تطوير أسرع وأكثر رشاقة لمشاريع الويب الحديثة. وهذه المشاريع تتكون من جزئين رئيسيين:\nخادم مطور يوفر تحسينات غنية بالميزات على وحدات ES الأصلية ، على سبيل المثال استبدال الوحدة النمطية السريعة للغاية (HMR).\nأمر بناء يجمع التعليمات البرمجية الخاصة بك مع Rollup ، مهيأ مسبقًا لإنتاج أصول ثابتة محسّنة للغاية للإنتاج.\nونستنتج من السابق أن أهم شئ بيميز vite هى السرعة فى بداية السيرفر وأيضا عمل bundle لملفات المشروع عند الانتهاء من المشروع. الخطوة الأولى: إنشاء مشروع Laravel جديد # composer create-project laravel/laravel laravel10-vue3 الخطوة الثانية: كيفية تحميل Vue 3 فى مشروع Laravel 10 # cd laravel10-vue3 npm install npm install vue@next vue-loader@next الخطوة الثالثة: تحميل Plugin Vue من Vite # npm i @vitejs/plugin-vue الخطوة الرابعة: قم بتعديل ملف vite.config.js # // vite.config.js import { defineConfig } from \u0026#39;vite\u0026#39;; import laravel from \u0026#39;laravel-vite-plugin\u0026#39;; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; export default defineConfig({ plugins: [ vue(), laravel({ input: [\u0026#39;resources/css/app.css\u0026#39;, \u0026#39;resources/js/app.js\u0026#39;], refresh: true, }), ], }); الخطوة الخامسة: قم بتعديل ملف app.js داخل مجلد resources/js # import {createApp} from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; createApp(App).mount(\u0026#34;#app\u0026#34;) الخطوة السادسة: قم بإنشاء ملف app.blade.php داخل مجلد resources/views # تأكد من إضافة ملف css و javascript كما هو موضح وأيضا div ب id=app \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ str_replace(\u0026#39;_\u0026#39;, \u0026#39;-\u0026#39;, app()-\u0026gt;getLocale()) }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;ًApplication\u0026lt;/title\u0026gt; @vite(\u0026#39;resources/css/app.css\u0026#39;) \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; @vite(\u0026#39;resources/js/app.js\u0026#39;) \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; الخطوة السابعة: قم بإنشاء ملف App.vue داخل مجلد resources/js # \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt; How To Install Vue 3 in Laravel 10 : Laravel SPA :) \u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; الخطوة الثامنة: قم بتعديل ملف web.php داخل مجلد routes # \u0026lt;?php use Illuminate\\Support\\Facades\\Route; Route::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;app\u0026#39;); }) -\u0026gt;name(\u0026#39;application\u0026#39;); الخطوة التاسعة: قم بتشغيل السيرفر المحلى # php artisan serve الخطوة العاشرة: فم بتشغيل السيرفر المحلى Node # npm run dev قم بالذهاب الى http://127.0.0.1:8000/ ستجد ما يلى Laravel 10 Vue 3 ستجد repo الخاصة بهذا المشروع على github هنا laravelspa/laravel10-vue3 PHP 1 0 ","date":"8 مايو 2023","permalink":"/ar/blog/how-to-install-vue3-in-laravel10-with-vite-in-arabic/","section":"Blogs","summary":"عرض المشروع # Laravel 10 Vue 3 ما هو إطار عمل Laravel # Laravel هو إطار عمل لتطبيق ويب ذو بناء مرتب وأنيق. يوفر إطار عمل الويب هيكلًا ونقطة بداية لإنشاء تطبيقك ، مما يسمح لك بالتركيز على إنشاء شيء مذهل بينما تهتم بالتفاصيل.","title":"كيفية تحميل Vue 3 داخل مشروع Laravel 10 بإستخدام Vite"},{"content":"","date":"1 يناير 0001","permalink":"/ar/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"شكرا لك على قراءة مدونتي!\nقم بالتسجيل في نشرتنا عبر البريد الإلكتروني أو يمكنك إستخدام RSS feed لتلقي تنبيهات حول منشورات المدونة الجديدة.\n","date":"1 يناير 0001","permalink":"/ar/subscribe/","section":"Laravel SPA","summary":"شكرا لك على قراءة مدونتي!\nقم بالتسجيل في نشرتنا عبر البريد الإلكتروني أو يمكنك إستخدام RSS feed لتلقي تنبيهات حول منشورات المدونة الجديدة.","title":"تابعنا"},{"content":" كن على تواصل ","date":"1 يناير 0001","permalink":"/ar/contact-us/","section":"Laravel SPA","summary":" كن على تواصل ","title":"تواصل معنا"},{"content":" سياسة خصوصية المدونة # قمنا بتصميم هذه المدونة للاسراء المحتوي العربي من خلال توفير موضوعات ومقالات هامة ومفيدة في تحضض المدونة وقد تم إعداد سياسة الخصوصية لمساعدتكم وحماية بياناتكم عند زيارتكم لمدونتنا علي شبكة الأنترنت وسيتم فقط استخدام البيانات التي تقدموها لنا بمعرفتكم ومحض إرادتكم ولا نجمع أي بيانات أخري عند تصفحكم مدونتنا الإلكترونية .\nعنوان بروتوكول شبكة الإنترنت (IP) # في أي وقت تزور فيه أي موقع انترنت بما فيها هذا الموقع , سيقوم السيرفر المضيف بتسجيل عنوان بروتوكول شبكة الإنترنت (IP) الخاص بك , تاريخ ووقت الزيارة ونوع متصفح الإنترنت الذي تستخدمه والعنوان URL الخاص بأي موقع من مواقع الإنترنت التي تقوم بإحالتك إلى الى هذا الموقع على الشبكة.\nالروابط بالمواقع الأخرى على شبكة الإنترنت # قد يشتمل موقعنا على روابط بالمواقع الأخرى على شبكة الإنترنت. او إعلانات من مواقع أخرى مثل Google AdSense ولا نعتبر مسئولين عن أساليب تجميع البيانات من قبل تلك المواقع, يمكنك الاطلاع على سياسات السرية والمحتويات الخاصة بتلك المواقع التي يتم الدخول إليها من خلال أي رابط ضمن هذا الموقع.\nنحن قد نستعين بشركات إعلان لأطراف ثالثة لعرض الإعلانات عندما تزور موقعنا على الويب. يحق لهذه الشركات أن تستخدم معلومات حول زياراتك لهذا الموقع ولمواقع الويب الأخرى (باستثناء الاسم أو العنوان أو عنوان البريد الإلكتروني أو رقم الهاتف)، وذلك من أجل تقديم إعلانات حول البضائع والخدمات التي تهمك. إذا كنت ترغب في مزيد من المعلومات حول هذا الأمر وكذلك إذا كنت تريد معرفة الاختيارات المتاحة لك لمنع استخدام هذه المعلومات من قِبل هذه الشركات ، فالرجاء النقر هنا.\nإفشاء المعلومات # سنحافظ في كافة الأوقات على خصوصية وسرية كافة البيانات الشخصية التي نتحصل عليها. ولن يتم إفشاء هذه المعلومات إلا إذا كان ذلك مطلوباً بموجب أي قانون أو عندما نعتقد بحسن نية أن مثل هذا الإجراء سيكون مطلوباً أو مرغوباً فيه للتمشي مع القانون , أو للدفاع عن أو حماية حقوق الملكية الخاصة بهذا الموقع أو الجهات المستفيدة منه.\nالبيانات اللازمة لتنفيذ المعاملات المطلوبة من قبلك # عندما نحتاج إلى أية بيانات خاصة بك , فإننا سنطلب منك تقديمها بمحض إرادتك. حيث ستساعدنا هذه المعلومات في الاتصال بك وتنفيذ طلباتك حيثما كان ذلك ممكنناً. لن يتم اطلاقاً بيع البيانات المقدمة من قبلك إلى أي طرف ثالث بغرض تسويقها لمصلحته الخاصة دون الحصول على موافقتك المسبقة والمكتوبة ما لم يتم ذلك على أساس أنها ضمن بيانات جماعية تستخدم للأغراض الإحصائية والأبحاث دون اشتمالها على أية بيانات من الممكن استخدامها للتعريف بك.\nعند الاتصال بنا # سيتم التعامل مع كافة البيانات المقدمة من قبلك على أساس أنها سرية . تتطلب النماذج التي يتم تقديمها مباشرة على الشبكة تقديم البيانات التي ستساعدنا في تحسين موقعنا. سيتم استخدام البيانات التي يتم تقديمها من قبلك في الرد على كافة استفساراتك , ملاحظاتك , أو طلباتك من قبل هذا الموقع أو أيا من المواقع التابعة له.\nإفشاء المعلومات لأي طرف ثالث # لن نقوم ببيع , المتاجرة , تأجير , أو إفشاء أية معلومات لمصلحة أي طرف ثالث خارج هذا الموقع, أو المواقع التابعة له. وسيتم الكشف عن المعلومات فقط في حالة صدور أمر بذلك من قبل أي سلطة قضائية أو تنظيمية.\nالاتصال بنا # يمكنكم الاتصال بنا عند الحاجة من خلال الضغط على رابط اتصل بنا المتوفر في موقعنا أو مراسلتنا عبر صفحة الفيس بوك.\n","date":"1 يناير 0001","permalink":"/ar/privacy-policy/","section":"Laravel SPA","summary":"سياسة خصوصية المدونة # قمنا بتصميم هذه المدونة للاسراء المحتوي العربي من خلال توفير موضوعات ومقالات هامة ومفيدة في تحضض المدونة وقد تم إعداد سياسة الخصوصية لمساعدتكم وحماية بياناتكم عند زيارتكم لمدونتنا علي شبكة الأنترنت وسيتم فقط استخدام البيانات التي تقدموها لنا بمعرفتكم ومحض إرادتكم ولا نجمع أي بيانات أخري عند تصفحكم مدونتنا الإلكترونية .","title":"سياسة الخصوصية"},{"content":"شروط الاستخدام\nباستخدامك لهذه المدونة، بأي وسيلة كانت، فأنت تقر بأنك قد قرأت هذه الاتفاقية وفهمتها و بأنك موافق علي ما ورد فيها.\n1- توفر المدونة إمكانية التعليق علي المحتوي المنشور فيها، و ويحق لك كما لكل المستخدمين المشاركة في التعليقات، علي الا تقوم بنشر أي محتوي يمكن ان يكون ضارا، غير مشروع، تشهيري، مخالف، مسيء، محرض، مضايق او ما شابه ذلك.\n2- أنت وحدك المسؤول عن التعليقات التي تشارك بها ولا تتحمل المدونة أي مسؤولية.\n3 - حقوق الملكية الفكرية للتعليقات تبقي مسجلة لك، لكن يحق لصاحب المدونة إعادة استخدام التعليقات في أي نشاط متعلق بالمدونة دون الحاجة الي طلب اذن مسبق من صاحب التعليق، بشرط ان يقوم بذكر اسم صاحب التعليق ولا يعدل علي التعليق يشكل يؤدي الي التحريف في معناه.\n4- للتعليق في المدونة يفضل ذكر اسمك الشخصي، يمكنك استخدام اسم مستعار، لكن لا يسمح ابداً بانتحال اسم أي شخص أو هيئة.\n5- يفضل ذكر بريدك الاليكتروني الحقيقي عند الاتصال بنا او التواصل معنا، المدونة تلتزم بعدم استخدام هذا البريد في أي نشاط سوي المراسلات الشخصية، وتلتزم بألا تسلم بريدك الي أي طرف ثالت دون اذن مسبق منك.\n6- يجب عليك ألا تعدل أو تغير في مواضيع المدونة أو استخدامها بطرق غير مشروعة بأي طرق يمكن ان تضر أو تعطل المدونة.\n7- لا يحق لك نقل محتوى المدنة من مواضيع و شروحات و فيديوهات إلى موقعك او مدونتك بدون ذكر المصدر و هي \u0026quot; مدونة Laravel SPA \u0026quot; مع رابط مباشر يؤدي إلى الموضوع الأصلي الذي تم نقله.\n8- قد تتغير هذه الاتفاقية من فترة لأخري بما نراه مناسباً لهدف المدونة، لذا أرجو منك مراجعتها والتقيد بما فيها.\n","date":"1 يناير 0001","permalink":"/ar/terms-and-conditions/","section":"Laravel SPA","summary":"شروط الاستخدام\nباستخدامك لهذه المدونة، بأي وسيلة كانت، فأنت تقر بأنك قد قرأت هذه الاتفاقية وفهمتها و بأنك موافق علي ما ورد فيها.\n1- توفر المدونة إمكانية التعليق علي المحتوي المنشور فيها، و ويحق لك كما لكل المستخدمين المشاركة في التعليقات، علي الا تقوم بنشر أي محتوي يمكن ان يكون ضارا، غير مشروع، تشهيري، مخالف، مسيء، محرض، مضايق او ما شابه ذلك.","title":"شروط الإستخدام"},{"content":"مرحبا انا محمود عادل.\nمرحبًا بك في Laravel SPA: موطن البرامج التعليمية ومقاطع الفيديو والنصائح حول إطار العمل المفضل لدينا Laravel. بدأت في عام 2023 كمدونة شخصية صغيرة ، وسوف تنمو لتصبح مركزًا للمعلومات المفيدة لجميع المستويات ان شاء الله.\nأدير أيضًا قناة على YouTube تحمل نفس اسم Laravel SPA.\nيمكنك متابعة أحدث دروس Laravel التعليمية على Twitter أو عن طريق الاشتراك في النشرة الإخبارية الأسبوعية.\nإذا كنت ترغب في التواصل ، أرسل بريدًا إلكترونيًا إلى dev.mahmoud.adel@gmail.com\n","date":"1 يناير 0001","permalink":"/ar/about-us/","section":"Laravel SPA","summary":"مرحبا انا محمود عادل.\nمرحبًا بك في Laravel SPA: موطن البرامج التعليمية ومقاطع الفيديو والنصائح حول إطار العمل المفضل لدينا Laravel. بدأت في عام 2023 كمدونة شخصية صغيرة ، وسوف تنمو لتصبح مركزًا للمعلومات المفيدة لجميع المستويات ان شاء الله.","title":"من نحن"}]