[{"content":"A small tool created to convert excel data to pdf.\nExcel To PDF Excel To PDF Excel To PDF Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Javascript Library # Dom To Image JS Barcode JS PDF Read Excel File Demo laravelspa/Excel-To-PDF JavaScript 0 0 ","date":"7 نوفمبر 2023","permalink":"/ar/portfolio/11.excel-to-pdf/","section":"Portfolios","summary":"A small tool created to convert excel data to pdf.\nExcel To PDF Excel To PDF Excel To PDF Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Javascript Library # Dom To Image JS Barcode JS PDF Read Excel File Demo laravelspa/Excel-To-PDF JavaScript 0 0 ","title":"Excel To PDF - Frontend Project"},{"content":"","date":"7 نوفمبر 2023","permalink":"/ar/","section":"Laravel SPA","summary":"","title":"Laravel SPA"},{"content":"","date":"7 نوفمبر 2023","permalink":"/ar/portfolio/","section":"Portfolios","summary":"","title":"Portfolios"},{"content":"A personal website theme powered by Nuxt Content, TailwindCSS, Iconify and Vue components.\nNuxt Wind Dark Theme Nuxt Wind Dark Theme Nuxt Wind Light Theme Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # TailwindCSS Javascript Library # Vue Nuxt Demo laravelspa/nuxt-wind-theme TypeScript 0 0 ","date":"6 نوفمبر 2023","permalink":"/ar/portfolio/10.nuxt-wind-theme/","section":"Portfolios","summary":"A personal website theme powered by Nuxt Content, TailwindCSS, Iconify and Vue components.\nNuxt Wind Dark Theme Nuxt Wind Dark Theme Nuxt Wind Light Theme Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # TailwindCSS Javascript Library # Vue Nuxt Demo laravelspa/nuxt-wind-theme TypeScript 0 0 ","title":"Nuxt Wind Theme - Frontend Project"},{"content":"A Simple Shop Template.\nSimple Shop Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Custom CSS Javascript Library # JQuery Icon Library # Font Awesome Demo laravelspa/Simple-Shop New Website jQuery HTML 0 0 ","date":"5 نوفمبر 2023","permalink":"/ar/portfolio/09.simple-shop-landing-page/","section":"Portfolios","summary":"A Simple Shop Template.\nSimple Shop Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Custom CSS Javascript Library # JQuery Icon Library # Font Awesome Demo laravelspa/Simple-Shop New Website jQuery HTML 0 0 ","title":"Simple Shop - Frontend Project"},{"content":"An 12-section landing page created for the purpose of selling the Natural product.\nSpiru Lin Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Spiru-Lin-Landing-Page CSS 0 0 ","date":"4 نوفمبر 2023","permalink":"/ar/portfolio/08.spiru-lin-landing-page/","section":"Portfolios","summary":"An 12-section landing page created for the purpose of selling the Natural product.\nSpiru Lin Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Spiru-Lin-Landing-Page CSS 0 0 ","title":"Spiru Lin Landing Page - Frontend Project"},{"content":"An 4-section landing page created for the purpose of selling the Natural product.\nGoji Cream Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Goji-Cream-2-Landing-Page CSS 0 0 ","date":"3 نوفمبر 2023","permalink":"/ar/portfolio/07.goji-cream-2-landing-page/","section":"Portfolios","summary":"An 4-section landing page created for the purpose of selling the Natural product.\nGoji Cream Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Goji-Cream-2-Landing-Page CSS 0 0 ","title":"Goji Cream 2 Landing Page - Frontend Project"},{"content":"An 8-section landing page created for the purpose of the exercise\nWellness Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/Wellness-Landing-Page Vue 0 0 ","date":"30 أكتوبر 2023","permalink":"/ar/portfolio/06.wellness-landing-page/","section":"Portfolios","summary":"An 8-section landing page created for the purpose of the exercise\nWellness Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/Wellness-Landing-Page Vue 0 0 ","title":"Wellness Landing Page - Frontend Project"},{"content":"An 7-section landing page created for the purpose of the exercise\nGolden Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/golden-landing-page Vue 0 0 ","date":"29 أكتوبر 2023","permalink":"/ar/portfolio/05.golden-landing-page/","section":"Portfolios","summary":"An 7-section landing page created for the purpose of the exercise\nGolden Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/golden-landing-page Vue 0 0 ","title":"Golden Landing Page - Frontend Project"},{"content":"An 7-section landing page created for the purpose of the exercise\nGolden Wapp Design Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/Golden-Wapp-Design-Landing-Page Vue 0 0 ","date":"28 أكتوبر 2023","permalink":"/ar/portfolio/04.golden-wapp-design-landing-page/","section":"Portfolios","summary":"An 7-section landing page created for the purpose of the exercise\nGolden Wapp Design Landing Page Requirements # Node v16.20.0 Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Tailwindcss Javascript Library # Vue Nuxt Demo laravelspa/Golden-Wapp-Design-Landing-Page Vue 0 0 ","title":"Golden Wapp Design Landing Page - Frontend Project"},{"content":"An 8-section landing page created for the purpose of selling the Natural product.\nCaviarMask Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Icon Library # Font Awesome Demo laravelspa/CaviarMask-Landing-Page CSS 0 0 ","date":"27 أكتوبر 2023","permalink":"/ar/portfolio/03.caviarmask-landing-page/","section":"Portfolios","summary":"An 8-section landing page created for the purpose of selling the Natural product.\nCaviarMask Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Icon Library # Font Awesome Demo laravelspa/CaviarMask-Landing-Page CSS 0 0 ","title":"CaviarMask Landing Page - Frontend Project"},{"content":"An 8-section landing page created for the purpose of the exercise\nunicode Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Unicode-Landing-Page Test Website CSS 0 0 ","date":"26 أكتوبر 2023","permalink":"/ar/portfolio/02.unicode-landing-page/","section":"Portfolios","summary":"An 8-section landing page created for the purpose of the exercise\nunicode Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Unicode-Landing-Page Test Website CSS 0 0 ","title":"Unicode Landing Page - Frontend Project"},{"content":"An 8-section landing page created for the purpose of the exercise\nPersonal Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Personal-Landing-Page legal justice group HTML 0 0 ","date":"25 أكتوبر 2023","permalink":"/ar/portfolio/01.personal-landing-page-copy/","section":"Portfolios","summary":"An 8-section landing page created for the purpose of the exercise\nPersonal Landing Page Languages # HTML (Markup Language) CSS (Style Sheet Language) Javascript (Scripting Language) Frontend Framework # Bootstrap Javascript Library # JQuery Demo laravelspa/Personal-Landing-Page legal justice group HTML 0 0 ","title":"Personal Landing Page - Frontend Project"},{"content":"","date":"20 أغسطس 2023","permalink":"/ar/blog/","section":"Blogs","summary":"","title":"Blogs"},{"content":"","date":"20 أغسطس 2023","permalink":"/ar/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"20 أغسطس 2023","permalink":"/ar/tags/eloquent/","section":"Tags","summary":"","title":"eloquent"},{"content":"","date":"20 أغسطس 2023","permalink":"/ar/categories/laravel/","section":"Categories","summary":"","title":"Laravel"},{"content":"","date":"20 أغسطس 2023","permalink":"/ar/series/laravel-eloquent-relationships/","section":"Series","summary":"","title":"Laravel Eloquent Relationships"},{"content":"","date":"20 أغسطس 2023","permalink":"/ar/categories/laravel-relationships/","section":"Categories","summary":"","title":"Laravel Relationships"},{"content":"","date":"20 أغسطس 2023","permalink":"/ar/tags/laravel10/","section":"Tags","summary":"","title":"laravel10"},{"content":"","date":"20 أغسطس 2023","permalink":"/ar/tags/relationships/","section":"Tags","summary":"","title":"relationships"},{"content":"","date":"20 أغسطس 2023","permalink":"/ar/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"20 أغسطس 2023","permalink":"/ar/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" كيف تحذف البيانات من علاقة واحد إلى كثير في Laravel؟ حذف البيانات باستخدام نموذج المستخدم. # نذهب أولاً إلى ملف routes/web.php وأضف هذا الرابط: Route::get(\u0026#39;/users/posts/delete\u0026#39;, function () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;posts()-\u0026gt;whereIn(\u0026#39;id\u0026#39;, [1, 2])-\u0026gt;delete(); return response()-\u0026gt;json($user); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/users/posts/delete لنجد أنه تم حذف ملف التعريف بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } حذف البيانات باستخدام نموذج المنشور. # نذهب أولاً إلى ملف routes/web.php وأضف هذا الرابط: Route::get(\u0026#39;/posts/user/delete\u0026#39;, function () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;findOrFail(2); $post-\u0026gt;delete(); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/posts/user/delete. نرى أنه تم حذف المنشور بنجاح. Rcord has deleted الخاتمة # هذه المقالة هي تكمبة لسلسلة كاملة عن Laravel Eloquent Relationships علاقات ضمن Laravel. لقد غطينا علاقة واحد إلى كثير بطريقة كاملة. لم ندخر لكم أي معلومة ، وإن شاء الله ، سنتعرف في الشرح التالي على علاقة كثير إلى كثير.\nيمكنك العثور على repo لهذه السلسلة على github هنا: laravelspa/laravel-relations PHP 0 0 ","date":"20 أغسطس 2023","permalink":"/ar/blog/how-to-delete-data-from-one-to-many-relationship-in-laravel-in-arabic/","section":"Blogs","summary":"كيف تحذف البيانات من علاقة واحد إلى كثير في Laravel؟ حذف البيانات باستخدام نموذج المستخدم. # نذهب أولاً إلى ملف routes/web.php وأضف هذا الرابط: Route::get(\u0026#39;/users/posts/delete\u0026#39;, function () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;posts()-\u0026gt;whereIn(\u0026#39;id\u0026#39;, [1, 2])-\u0026gt;delete(); return response()-\u0026gt;json($user); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.","title":"كيفية حذف البيانات فى علاقة واحد إلى كثير في Laravel؟"},{"content":" كيفية تحديث علاقة one-to-many في Laravel؟ تحديث البيانات باستخدام نموذج المستخدم. # باستخدام push method. نذهب أولاً إلى ملف routes/web.php ونقوم بتعديل هذا الرابط: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($user); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/users/update لنجد أنه تم تحديث المنشور بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:37:30.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } بإستخدام update method. نذهب أولاً إلى الملف routes/web.php ونقوم بتعديل هذا الرابط. Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1\u0026#39;; $post-\u0026gt;update(); return response()-\u0026gt;json($user); ]); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/users/update لنجد أنه تم تحديث المنشور بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:25:58.000000Z\u0026#34;, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:41:35.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T17:29:49.000000Z\u0026#34; } ] } تحديث البيانات باستخدام نموذج المنشور. # باستخدام push method. نذهب أولاً إلى ملف routes/web.php وأضف هذا الرابط: Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($post); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/posts/update لنجد أنه تم تحديث المنشور بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1 updated\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:50:30.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } بإستخدام update method. نذهب أولاً إلى الملف routes/web.php ونقوم بتعديل هذا الرابط. Route::get(\u0026#39;/posts/update\u0026#39;, method () { $post = Post::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $post-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe\u0026#39;; $post-\u0026gt;update([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39; ]); return response()-\u0026gt;json($post); ]); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/posts/update لنجد أنه تم تحديث المنشور بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:28:58.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:55:45.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-09-06T17:24:02.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-09-06T18:49:54.000000Z\u0026#34; } } يمكنك العثور على repo لهذه السلسلة على github هنا: laravelspa/laravel-relations PHP 0 0 ","date":"19 أغسطس 2023","permalink":"/ar/blog/how-to-update-a-one-to-many-relationship-in-laravel-in-arabic/","section":"Blogs","summary":"كيفية تحديث علاقة one-to-many في Laravel؟ تحديث البيانات باستخدام نموذج المستخدم. # باستخدام push method. نذهب أولاً إلى ملف routes/web.php ونقوم بتعديل هذا الرابط: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;posts\u0026#39;)-\u0026gt;find(1); $post = $user-\u0026gt;posts()-\u0026gt;whereId(1)-\u0026gt;first(); $post-\u0026gt;title = \u0026#39;Post title 1 updated\u0026#39;; $post-\u0026gt;push(); return response()-\u0026gt;json($user); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.","title":"كيفية تحديث علاقة one to many فى Laravel؟"},{"content":" كيف يمكنك استرداد البيانات من علاقة one to many في Laravel؟ رأينا كيف يتم حفظ البيانات بطرق مختلفة ومتعددة داخل قاعدة البيانات بإستخدام علاقة One-To-Many فى Laravel. ولكن كيف يتم جلب البيانات من قاعدة البيانات؟ هناك عدة طرق يمكن من خلالها جلب البيانات من قاعدة البيانات. وتنقسم هذه الطرق الى طريقتين أساسيتين:\nمن خلال المستخدم User Model # تنقسم هذه الطريقة الى طريقتين فرعيتين تعتمد على كيفية تنظيم البيانات بعد جلبها من قاغدة البيانات\nبدون إستخدام API Resources. # نقوم بالتوجه أولا لملف routes/web.php حتى نستطيع أن نختبر هذه الطرق ونقوم بالتعديلات التالية. use App\\Models\\User; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;, \u0026#39;posts\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); هنا يمكننا اختيار الاعمده الخاصه بكل علاقة بالشكل التالي.\nuse App\\Models\\User; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile:id,firstname,lastname,user_id\u0026#39;, \u0026#39;posts:title,user_id\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); ولكى نعرف الفرق بين تحديدنا او عدم تحديدنا للأعمدة من قاعدة البيانات تعالوا نرى الأستجابة الخاصة لكل حالة\nالخالة الأولى مع جلب البيانات جميعها بدون إستثناء نجد أن $users يحتوى على البيانات تلك. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; }, \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34; } ] } ] أما فى الحالة الثانية عند تحديد الأعمدة المطلوبة بالضبط من قاعدة البيانات نجد أن الإستجابة كالتالى. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2 }, { \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 }, \u0026#34;posts\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } ] } ] وهنا نرى الفرق بين الحالتين فى حجم البيانات التى تمت معالجتها ويزداد الأمر إذا كانت البيانات حجمها أكبر من ذلك بكثير. يجب عند إختيار إعمدة محددة فى العلاقات أن تختار foreignKey لأن بدون إختيارك له لن تعود البيانات بشكل صحيح من قاعدة البيانات.\nنقوم بالذهاب الى المسار التالى resources/views/users ونقوم بتعديل هذا الملف list.blade.php لعرض المستخدمين وملفات التعريف الخاصة بهم وأيضا ما يهمنا هنا هو عرض المنشورات الخاصة لكل مستخدم. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Posts\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;ul\u0026gt; @foreach ($user-\u0026gt;posts as $post) \u0026lt;li\u0026gt;{{ $post-\u0026gt;title }}\u0026lt;/li\u0026gt; @endforeach \u0026lt;/ul\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; أفتح المتصفح وقم بالذهاب الى الرابط التالى http://127.0.0.1:8000/users لنرى ما هى النتائج التى ستظهر. Users view with posts عن طريق إستخدام API Resources. # سنقوم بإنشاء API Resource لنموذج Post عن طريق تنفيذ هذا الأمر فى موجه الأوامر. php artisan make:resource PostResource تذهب الى المسار التالى App/Http/Resources ونبدأ بالتعديل على كلا من: PostResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class PostResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, ]; } } نقوم بالتوجه أولا لملف routes/api.php لنضيف رابط جديد. use App\\Models\\User; use App\\Http\\Resources\\UserResource; --- Route::get(\u0026#39;/users\u0026#39;, function () { $users = User::with([\u0026#39;profile\u0026#39;, \u0026#39;posts\u0026#39;])-\u0026gt;get(); $usersResource = UserResource::collection($users); return response()-\u0026gt;json($usersResource); }); أفتح المتصفح وقم بالذهاب الى الرابط التالى http://127.0.0.1:8000/api/users لنرى ما هى النتائج التى ستظهر. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34; }, { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34; }, { \u0026#34;user_id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34; }, { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34; }, { \u0026#34;user_id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34; } ] }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; }, \u0026#34;postss\u0026#34;: [ { \u0026#34;user_id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34; } ] } ] ونرى هنا أيضا أننا نجلب البيانات المطلوبة فقط.\nمن خلال المنشور Post Model # تنقسم هذه الطريقة الى طريقتين فرعيتين تعتمد على كيفية تنظيم البيانات بعد جلبها من قاغدة البيانات\nبدون إستخدام API Resources. # نقوم بالتوجه أولا لملف routes/web.php حتى نستطيع أن نختبر هذه الطرق ونقوم بإضافة هذا الرابط الجديد. use App\\Models\\Post; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with(\u0026#39;user\u0026#39;, \u0026#39;user.profile\u0026#39;)-\u0026gt;get(); return view(\u0026#39;posts.list\u0026#39;, compact(\u0026#39;posts\u0026#39;)); }); هنا يمكننا اختيار الاعمده الخاصه بكل علاقة بالشكل التالي.\nuse App\\Models\\Post; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with(\u0026#39;user:username,id\u0026#39;, \u0026#39;user.profile:firstname,lastname,user_id\u0026#39;)-\u0026gt;get(); return view(\u0026#39;posts.list\u0026#39;, compact(\u0026#39;posts\u0026#39;)); }); ولكى نعرف الفرق بين تحديدنا او عدم تحديدنا للأعمدة من قاعدة البيانات تعالوا نرى الأستجابة الخاصة لكل حالة\nالخالة الأولى مع جلب البيانات جميعها بدون إستثناء نجد أن $posts يحتوى على البيانات تلك. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] أما فى الحالة الثانية عند تحديد الأعمدة المطلوبة بالضبط من قاعدة البيانات نجد أن الإستجابة كالتالى. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;id\u0026#34;: 3, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:41.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } } } ] يجب عند إختيار إعمدة محددة فى العلاقات أن تختار id وأنت تختار علاقة user لأن بدون إختيارك له لن يعود المستخدم مع المنشور.\nنقوم بالذهاب الى المسار التالى resources/views/users ونقوم بتعديل هذا الملف list.blade.php لعرض المستخدمين وملفات التعريف الخاصة بهم وأيضا ما يهمنا هنا هو عرض المنشورات الخاصة لكل مستخدم. \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Posts\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;ul\u0026gt; @foreach ($user-\u0026gt;posts as $post) \u0026lt;li\u0026gt;{{ $post-\u0026gt;title }}\u0026lt;/li\u0026gt; @endforeach \u0026lt;/ul\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; أفتح المتصفح وقم بالذهاب الى الرابط التالى http://127.0.0.1:8000/users لنرى ما هى النتائج التى ستظهر. Users view with posts عن طريق إستخدام API Resources. # تذهب الى المسار التالى App/Http/Resources ونبدأ بالتعديل على ملف PostResource.php: \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class PostResource extends JsonResource { public function toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, \u0026#39;user\u0026#39; =\u0026gt; UserResource::make($this-\u0026gt;whenLoaded(\u0026#39;user\u0026#39;)), ]; } } نقوم بالتوجه أولا لملف routes/web.php لنضيف رابط جديد. use App\\Models\\Post; use App\\Http\\Resources\\PostResource; --- Route::get(\u0026#39;/posts\u0026#39;, function () { $posts = Post::with([\u0026#39;user\u0026#39;])-\u0026gt;get(); $postsResource = PostResource::collection($posts); return response()-\u0026gt;json($postsResource); }); أفتح المتصفح وقم بالذهاب الى الرابط التالى http://127.0.0.1:8000/api/posts لنرى ما هى النتائج التى ستظهر. [ { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34; } }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34; } }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34; } }, { \u0026#34;id\u0026#34;: 7, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } } ] ونرى هنا أيضا أننا نجلب البيانات المطلوبة فقط.\nيمكنك العثور على repo لهذه السلسلة على github هنا: laravelspa/laravel-relations PHP 0 0 ","date":"18 أغسطس 2023","permalink":"/ar/blog/how-can-you-retrieve-data-from-a-one-to-many-relationship-in-laravel-in-arabic/","section":"Blogs","summary":"كيف يمكنك استرداد البيانات من علاقة one to many في Laravel؟ رأينا كيف يتم حفظ البيانات بطرق مختلفة ومتعددة داخل قاعدة البيانات بإستخدام علاقة One-To-Many فى Laravel. ولكن كيف يتم جلب البيانات من قاعدة البيانات؟ هناك عدة طرق يمكن من خلالها جلب البيانات من قاعدة البيانات.","title":"كيفية استرداد البيانات فى علاقة one to many في Laravel؟"},{"content":" كيفية إدراج البيانات في علاقة واحد الى كثير في قاعدة البيانات؟ # كيفية إدراج البيانات في علاقة واحد لكثير في قاعدة البيانات؟ بعد أن قمنا بإنشاء علاقة One-To-Many بين كلا من جدول المستخدمين وجدول المنشورات وأضفنا hasMany داخل User Model, وأيضا قمنا بإضافة العلاقة العكسية داخل Post Model بإضافة belongsTo إليه.\nجاء الوقت لمعرفة كيف يتم حفظ البيانات فى قاعدة البيانات أثناء إستخدامنا لهذه العلاقة. وما هى الطرق المستخدمة فى ذلك\nتنقسم هذه الطرق الى ثلاث طرق اساسية:\nبدون إستخدام function post. عن طريق إستخدام function post. عن طريق إستخدام العلاقة العكسية function user. 1. بدون إستخدام function post. # هنا يوجد سيناريوهان:\nأولا: إضافة منشور واحد فقط للمستخدم. ثانيا: إضافة أكثر من منشور للمستخدم. أولا: إضافة منشور واحد فقط للمستخدم. # نقوم بالتوجه أولا لملف routes/web.php و نضيف رابط جديد حتى نستطيع أن نختبر هذه الطرق. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(1); Post::create([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 1\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 1\u0026#39;, ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts ]); }); نقوم بفتح المتصفح والذهاب الى هذا الرابط http://127.0.0.1:8000/one-to-many لنجد أنه تم إضافة منشور واحد بنجاح الى المستخدم صاخبId رقم 1. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34; } ] } ثانيا: إضافة أكثر من منشور للمستخدم. # نقوم بالتوجه أولا لملف routes/web.php و نقوم بالتعديل على هذا الرابط. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(2); Post::insert( [ [ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 2\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 2\u0026#39;, ], [ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 3\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 3\u0026#39;, ], ] ); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts ]); }); نقوم بفتح المتصفح والذهاب الى هذا الرابط http://127.0.0.1:8000/one-to-many لنجد أنه تم إضافة عدد 2 منشور الى المستخدم صاحب Id رقم 2 بنجاح. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;Post title 2\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 2\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null }, { \u0026#34;id\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;Post title 3\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 3\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: null, \u0026#34;updated_at\u0026#34;: null } ] } 2. عن طريق إستخدام function post. # هنا أيضا يوجد سيناريوهان: أولا: إضافة منشور واحد فقط للمستخدم ثانيا: إضافة أكثر من منشور للمستخدم\nأولا: إضافة منشور واحد فقط للمستخدم. # نقوم بالتوجه أولا لملف routes/web.php و نقوم بالتعديل على هذا الرابط. use App\\Models\\User; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(3); $user-\u0026gt;posts()-\u0026gt;create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 4\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 4\u0026#39;, ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts, ]); }); نقوم بفتح المتصفح والذهاب الى هذا الرابط http://127.0.0.1:8000/one-to-many لنجد أنه تم إضافة منشور واحد الى المستخدم صاحب Id رقم 3 بنجاح. { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 4, \u0026#34;title\u0026#34;: \u0026#34;Post title 4\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 4\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:37:55.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:37:55.000000Z\u0026#34; } ] } ثانيا: إضافة أكثر من منشور للمستخدم. # نقوم بالتوجه أولا لملف routes/web.php و نقوم بالتعديل على هذا الرابط. use App\\Models\\User; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(1); $user-\u0026gt;posts()-\u0026gt;createMany([ [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 5\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 5\u0026#39;, ], [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 6\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 6\u0026#39;, ] ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;post\u0026#39; =\u0026gt; $user-\u0026gt;posts, ]); }); نقوم بفتح المتصفح والذهاب الى هذا الرابط http://127.0.0.1:8000/one-to-many لنجد أنه تم إضافة عدد 2 منشور الى المستخدم صاحب Id رقم 1 بنجاح. بالإضافة الى تلك المنشورات هناك منشور أخر تم إضافته فى خطوة سابقة وبالتالى فالمفروض وجود عدد 3 منشورات لهذا الستخدم. وهذه بالفعل البيانات التى تم الحصول عليها من قاعدة البيانات فى الإستجابة التالية. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;post\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;Post title 1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 1\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:18:22.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 5, \u0026#34;title\u0026#34;: \u0026#34;Post title 5\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 5\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34; }, { \u0026#34;id\u0026#34;: 6, \u0026#34;title\u0026#34;: \u0026#34;Post title 6\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 6\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-05T03:42:27.000000Z\u0026#34; } ] } 3. عن طريق إستخدام العلاقة العكسية function user. # نقوم بالتوجه أولا لملف routes/web.php و نقوم بالتعديل على هذا الرابط. use App\\Models\\User; use App\\Models\\Post; --- Route::get(\u0026#39;/one-to-many\u0026#39;, function () { $user = User::find(2); $post = new Post([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Post title 7\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;Post body 7\u0026#39;, ]); $post-\u0026gt;user()-\u0026gt;associate($user)-\u0026gt;save(); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $post-\u0026gt;user-\u0026gt;username, \u0026#39;title\u0026#39; =\u0026gt; $post-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $post-\u0026gt;body, ]); }); نقوم بفتح المتصفح والذهاب الى هذا الرابط http://127.0.0.1:8000/one-to-many لنجد أنه تم إضافة منشور الى المستخدم صاحب Id رقم 2 بنجاح. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Post title 7\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Post body 7\u0026#34; } يمكنك العثور على repo لهذه السلسلة على github هنا: laravelspa/laravel-relations PHP 0 0 ","date":"17 أغسطس 2023","permalink":"/ar/blog/how-to-insert-data-in-one-to-many-relationship-in-database-in-arabic/","section":"Blogs","summary":"كيفية إدراج البيانات في علاقة واحد الى كثير في قاعدة البيانات؟ # كيفية إدراج البيانات في علاقة واحد لكثير في قاعدة البيانات؟ بعد أن قمنا بإنشاء علاقة One-To-Many بين كلا من جدول المستخدمين وجدول المنشورات وأضفنا hasMany داخل User Model, وأيضا قمنا بإضافة العلاقة العكسية داخل Post Model بإضافة belongsTo إليه.","title":"كيفية إدراج البيانات في علاقة واحد الى كثير في قاعدة البيانات؟"},{"content":"بعد أن تعرفنا على أنواع العلاقات داخل Laravel فى الحزء السابق. وقمنا بتناول أول نوع من هذه العلاقات وهى علاقة One-To-One.\nاليوم نستكمل السلسلة التى بدأناها فى تعلم Laravel Eloquent Relationships.\nو نتكلم عن النوع الثانى والذى يطلق عليه One-To-Many او hasMany.\nlaravel one to many relationship كيف تنشئ علاقة One-To-Many فى Laravel؟ # كيف تُنشئ علاقة One-To-Many في Laravel؟ تعتير علاقة One-To-Many من أهم أنواع العلاقات الموجودة داخل Laravel Eloquent. وعرفنا أيضا فى الدرس السابق أنها عبارة عن ارتباط صف من الجدول الأول بأكثر من صف واحد من الجدول الثانى.\nواستكمالاً للتطبيق العملى (نظام إدارة المحتوى) الذى بدأناه فى الدرس السابق. وقمنا بإنشاء علاقة One-To-One بين المستخدم وملف التعريف الضخصى.\nاليوم سنقوم بإنشاء علاقة One-To-Many بين المستخدم و المنشور. فكل مستخدم يستطيع أن يمتلك منشور او أكثر.\nنقوم بإنشاء Post Model مع الجدول الخاص به. php artisan make:model Post -m نقوم بالتوجه الى هذا المسار database/migrations والتعديل على جدول المنشورات بإضافة بعض الأعمدة كما يلى: Schema::create(\u0026#39;posts\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;title\u0026#39;); $table-\u0026gt;text(\u0026#39;body\u0026#39;); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); نقوم بتعديل ملف Post.php. protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;body\u0026#39;, ]; نقوم بتنفيذ هذا الأمر لتحديث قاعدة البيانات وإضافة جدول المتشورات. php artisan migrate نقوم بالتوجه الى ملف User.php وتعيين علاقة hasMany. public function posts() { return $this-\u0026gt;hasMany(Post::class); } لنتعرف كيف تعمل hasMany\n$this-\u0026gt;hasMany(Post::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // localKey =\u0026gt; Primary Key In Parent Table By Default is Id ); نقوم بالتوجه الى ملف Post.php وتعيين العلاقة العكسية belongsTo. public function user() { return $this-\u0026gt;belongsTo(User::class); } ولقد قمنا بشرح belongsTo فى هذا الجزء من المقال السابق ونحن نقوم بشرح علاقة One-To-One.\nيمكنك العثور على repo لهذه السلسلة على github هنا: laravelspa/laravel-relations PHP 0 0 ","date":"16 أغسطس 2023","permalink":"/ar/blog/how-to-create-a-one-to-many-relationship-in-laravel-in-arabic/","section":"Blogs","summary":"بعد أن تعرفنا على أنواع العلاقات داخل Laravel فى الحزء السابق. وقمنا بتناول أول نوع من هذه العلاقات وهى علاقة One-To-One.\nاليوم نستكمل السلسلة التى بدأناها فى تعلم Laravel Eloquent Relationships.","title":"كيفية إنشاء علاقة One-To-Many فى Laravel؟"},{"content":" كيف تحذف البيانات من علاقة واحد إلى واحد في Laravel؟ حذف البيانات باستخدام نموذج المستخدم. # نذهب أولاً إلى ملف routes/web.php وأضف هذا المسار: Route::get(\u0026#39;/users/profile/delete\u0026#39;, method () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;profile()-\u0026gt;delete(); return response()-\u0026gt;json($user); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/users/profile/delete لنجد أنه تم حذف ملف التعريف بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;Joun Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: null } قم بتحديث الصفحة مرتين لإظهار أنه تم حذف ملف تعريف هذا المستخدم.\nحذف البيانات باستخدام نموذج الملف الشخصي. # نذهب أولاً إلى ملف routes/web.php وأضف هذا المسار: Route::get(\u0026#39;/profiles/user/delete\u0026#39;, method () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;findOrFail(2); $profile-\u0026gt;delete(); $profile-\u0026gt;user()-\u0026gt;delete(); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/profiles/user/delete. نرى أنه تم حذف المستخدم والملف الشخصي بنجاح. Rcord has deleted الخاتمة # هذه المقالة هي بداية سلسلة كاملة عن Laravel Eloquent Relationships علاقات ضمن Laravel. لقد غطينا علاقة واحد إلى واحد بطريقة كاملة. لم ندخر لكم أي معلومة ، وإن شاء الله ، سنتعرف في الشرح التالي على علاقة واحد إلى كثير.\nيمكنك العثور على repo لهذه السلسلة على github هنا: laravelspa/laravel-relations PHP 0 0 ","date":"15 أغسطس 2023","permalink":"/ar/blog/how-to-delete-data-from-one-to-one-relationship-in-laravel-in-arabic/","section":"Blogs","summary":"كيف تحذف البيانات من علاقة واحد إلى واحد في Laravel؟ حذف البيانات باستخدام نموذج المستخدم. # نذهب أولاً إلى ملف routes/web.php وأضف هذا المسار: Route::get(\u0026#39;/users/profile/delete\u0026#39;, method () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;profile()-\u0026gt;delete(); return response()-\u0026gt;json($user); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.","title":"كيفية حذف البيانات فى علاقة واحد إلى واحد في Laravel؟"},{"content":" كيفية تحديث علاقة one-to-one في Laravel؟ تحديث البيانات باستخدام نموذج المستخدم. # باستخدام push method. نذهب أولاً إلى ملف routes/web.php وأضف هذا المسار: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $user-\u0026gt;profile-\u0026gt;lastname = \u0026#39;Doe Updated\u0026#39;; $user-\u0026gt;push(); return response()-\u0026gt;json($user); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/users/update لنجد أنه تم تحديث المستخدم والملف الشخصي بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:44:19.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe Updated\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:44:19.000000Z\u0026#34; } } بإستخدام update method. نذهب أولاً إلى الملف routes/web.php ونقوم بتعديل هذا المسار. Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;username = \u0026#39;John Doe\u0026#39;; $user-\u0026gt;save(); $user-\u0026gt;profile-\u0026gt;update([ \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39; ]); return response()-\u0026gt;json($user); ]); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/users/update لنجد أنه تم تحديث المستخدم والملف الشخصي بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:46:11.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T04:46:11.000000Z\u0026#34; } } تحديث البيانات باستخدام نموذج الملف الشخصي. # باستخدام push method. نذهب أولاً إلى ملف routes/web.php وأضف هذا المسار: Route::get(\u0026#39;/profiles/update\u0026#39;, method () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $profile-\u0026gt;firstname = \u0026#39;John Updated\u0026#39;; $profile-\u0026gt;lastname = \u0026#39;Doe Updated\u0026#39;; $profile-\u0026gt;user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $profile-\u0026gt;push(); return response()-\u0026gt;json($profile); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/profiles/update لنجد أنه تم تحديث المستخدم والملف الشخصي بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John Updated\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe Updated\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:02:31.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe Updated\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:02:31.000000Z\u0026#34; } } بإستخدام update method. نذهب أولاً إلى الملف routes/web.php ونقوم بتعديل هذا المسار. Route::get(\u0026#39;/profiles/update\u0026#39;, method () { $profile = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;find(1); $profile-\u0026gt;firstname = \u0026#39;John\u0026#39;; $profile-\u0026gt;lastname = \u0026#39;Doe\u0026#39;; $profile-\u0026gt;save(); $profile-\u0026gt;user-\u0026gt;update([ \u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Joun Doe\u0026#39; ]); return response()-\u0026gt;json($profile); ]); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.0.0.1:8000/profiles/update لنجد أنه تم تحديث المستخدم والملف الشخصي بنجاح. { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;Joun Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-10T05:07:38.000000Z\u0026#34; } } يمكنك العثور على repo لهذه السلسلة على github هنا: laravelspa/laravel-relations PHP 0 0 ","date":"14 أغسطس 2023","permalink":"/ar/blog/how-to-update-a-one-to-one-relationship-in-laravel-in-arabic/","section":"Blogs","summary":"كيفية تحديث علاقة one-to-one في Laravel؟ تحديث البيانات باستخدام نموذج المستخدم. # باستخدام push method. نذهب أولاً إلى ملف routes/web.php وأضف هذا المسار: Route::get(\u0026#39;/users/update\u0026#39;, method () { $user = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;find(1); $user-\u0026gt;username = \u0026#39;John Doe Updated\u0026#39;; $user-\u0026gt;profile-\u0026gt;lastname = \u0026#39;Doe Updated\u0026#39;; $user-\u0026gt;push(); return response()-\u0026gt;json($user); }); نفتح المتصفح وننتقل إلى عنوان URL الجديد http://127.","title":"كيفية تحديث علاقة one-to-one في Laravel؟"},{"content":" كيف يمكنك استرداد البيانات من علاقة one to one في Laravel؟ لقد رأينا كيف يتم حفظ البيانات بعدة طرق مختلفة في قاعدة البيانات باستخدام علاقة one to one في Laravel. لكن كيف نسترجع البيانات من قاعدة البيانات؟ هناك عدة طرق لاسترداد البيانات من قاعدة البيانات.\nيمكن تقسيم هذه الطرق إلى فئتين رئيسيتين:\nالاسترجاع المباشر: تتضمن هذه الطريقة الاستعلام مباشرة عن قاعدة البيانات عن البيانات التي تحتاجها. هذه هي الطريقة الأكثر فاعلية لاسترداد البيانات ، ولكن قد يكون من الصعب استخدامها إذا لم تكن على دراية بـ SQL.\nEloquent ORM: يوفر Eloquent ORM في Laravel طريقة سهلة الاستخدام لاسترداد البيانات من قاعدة البيانات. يستخدم Eloquent ORM مجموعة من الأساليب لتعيين جداول قاعدة البيانات إلى كائنات في PHP. هذا يجعل من السهل استرداد البيانات من قاعدة البيانات دون الحاجة إلى معرفة SQL. في هذه السلسلة ، سنركز على استخدام Eloquent ORM لاسترداد البيانات من قاعدة البيانات.\nأثناء استرداد بيانات المستخدمين: # أثناء جمع بيانات المستخدم ، سنحصل على ملفاتهم الشخصية. بعد ذلك ، يتم تقسيم موضوع عرض تلك البيانات إلى شكلين ، ولا ثالث لهما. سيحدد نوع التطبيق الذي تعمل عليه النموذج الذي يجب استخدامه.\nأولاً: تطبيق يستخدم مسارات الويب. ثانيًا: تطبيق يعتمد على مسارات API. أولاً: تطبيق يستخدم مسارات الويب. # ننتقل أولاً إلى ملف routes/web.php ونجري التغييرات التالية: Route::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); إذا تحققنا من الاستجابة لهذا الأمر ، فسنجد أنه تم الحصول على جميع البيانات من قاعدة البيانات.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] هنا ، يمكنك فقط اختيار الأعمدة التي تحتاجها في النموذج التالي:\nRoute::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile:firstname,lastname,user_id\u0026#39;])-\u0026gt;get(); return view(\u0026#39;users.list\u0026#39;, compact(\u0026#39;users\u0026#39;)); }); إذا تحققنا الآن مرة أخرى ، فستجد أن حجم البيانات قد تم تصغيره.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user_id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user_id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user_id\u0026#34;: 3 } } ] هنا ، نرى الفرق بين الحالتين في حجم البيانات المعالجة. تزداد المسألة بشكل كبير إذا كانت البيانات أكبر من ذلك بكثير.\nعند اختيار أعمدة معينة من العلاقات ، يجب دائمًا اختيار عمود foreign key. بدون اختياره ، لن يتم إرجاع البيانات بشكل صحيح من قاعدة البيانات.\nداخل مجلد views ، نضيف مجلدًا آخر باسم users. بداخله نضيف الملف list.blade.php. في list.blade.php نضيف هذا الجدول البسيط لعرض المستخدمين: \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($users as $user) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $user-\u0026gt;profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; افتح المتصفح وانتقل إلى عنوان URL التالي http://127.0.0.1:8000/users لترى النتائج التي ستظهر. Users Table ثانيًا: تطبيق يعتمد على مسارات API. # ما هي API Resources؟\nببساطة ، إنها طبقة وسيطة بين Eloquent واستجابة API ، حيث تقوم بتحويل البيانات التي تم الحصول عليها من قاعدة البيانات إلى JSON مع القدرة على تحديد بيانات معينة دون غيرها أو معالجة تلك البيانات.\nنقوم بإنشاء API Resocrces للمستخدمين والملفات الشخصية. قم بتنفيذ هذا الأمر في موجه الأوامر. php artisan make:resource UserResource php artisan make:resource ProfileResource انتقل إلى المسار التالي: *** App\\Http\\Resources*** وعدّل كليهما: ملف ProfileResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; $this-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $this-\u0026gt;lastname, ]; } } ملف UserResource.php. \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class UserResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;username\u0026#39; =\u0026gt; $this-\u0026gt;username, \u0026#39;profile\u0026#39; =\u0026gt; ProfileResource::make($this-\u0026gt;whenLoaded(\u0026#39;profile\u0026#39;)), ]; } } انتقل إلى ملف routes/api.php الخاص بك وأضف مسارًا جديدًا. use App\\Models\\User; use App\\Http\\Resources\\UserResource; --- Route::get(\u0026#39;/users\u0026#39;, method () { $users = User::with([\u0026#39;profile\u0026#39;])-\u0026gt;get(); $usersResource = UserResource::collection($users); return response()-\u0026gt;json($usersResource); }); افتح المتصفح وانتقل إلى عنوان URL التالي http://127.0.0.1:8000/api/users لترى النتائج التي ستظهر. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;profile\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } } ] نرى هنا أيضًا أننا حصلنا على البيانات المطلوبة المحددة في ملفات موارد API فقط.\nأثناء استرداد بيانات الملفات الشخصية: # أثناء الحصول على بيانات الملف الشخصي ، سنحصل على كل مستخدم مرتبط بهذه الملفات الشخصية. بعد ذلك ، يمكن عرض البيانات في شكلين لا ثالث لهما. سيحدد نوع التطبيق الذي تعمل عليه والموضوع المستخدم أي شكل من أشكال عرض البيانات هو الأنسب.\nأولاً: تطبيق يستخدم مسارات الويب. ثانيًا: تطبيق يعتمد على مسارات API. أولاً: تطبيق يستخدم مسارات الويب. # ننتقل أولاً إلى ملف routes/web.php ونجري التغييرات التالية: Route::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with(\u0026#39;user\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); إذا تحققنا من الاستجابة لهذا الأمر ، فسنجد أنه تم الحصول على جميع البيانات من قاعدة البيانات.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34; } } ] هنا ، يمكنك فقط اختيار الأعمدة التي تحتاجها في النموذج التالي:\nRoute::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with(\u0026#39;user:username,id\u0026#39;)-\u0026gt;get(); return view(\u0026#39;profiles.list\u0026#39;, compact(\u0026#39;profiles\u0026#39;)); }); إذا تحققنا الآن مرة أخرى ، فستجد أن حجم البيانات قد تم تصغيره.\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;08-11-1991\u0026#34;, \u0026#34;user_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;id\u0026#34;: 1 } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-02-2000\u0026#34;, \u0026#34;user_id\u0026#34;: 2, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;id\u0026#34;: 2 } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;birthday\u0026#34;: \u0026#34;01-01-1999\u0026#34;, \u0026#34;user_id\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2023-08-07T06:23:03.000000Z\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;id\u0026#34;: 3 } } ] هنا ، نرى الفرق بين الحالتين في حجم البيانات المعالجة. تزداد المسألة بشكل كبير إذا كانت البيانات أكبر من ذلك بكثير.\nعند تحديد أعمدة معينة في العلاقات ، يجب تضمين حقل id عند اختيار علاقة user. خلاف ذلك ، لن يتم إرجاع المستخدم مع بيانات ملف التعريف.\nداخل مجلد views ، نضيف مجلدًا آخر باسم profiles. بداخله نضيف الملف list.blade.php. في list.blade.php نضيف هذا الجدول البسيط لعرض الملفات الشخصية للمستخدمين.: \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Username\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Firstname\u0026lt;/th\u0026gt; \u0026lt;th style=\u0026#34;text-align: center\u0026#34;\u0026gt;Lastname\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; @foreach ($profiles as $profile) \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;user-\u0026gt;username }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;firstname }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ $profile-\u0026gt;lastname }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; @endforeach \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; افتح المتصفح وانتقل إلى عنوان URL التالي http://127.0.0.1:8000/profiles لترى النتائج التي ستظهر. Profiles Table ثانيًا: تطبيق يعتمد على مسارات API. # انتقل إلى المسار التالي: *** App\\Http\\Resources*** وعدّل هذا الملف ProfileResource.php: \u0026lt;?php namespace App\\Http\\Resources; use Illuminate\\Http\\Request; use Illuminate\\Http\\Resources\\Json\\JsonResource; class ProfileResource extends JsonResource { public method toArray(Request $request): array { return [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;id, \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;title, \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;body, \u0026#39;user\u0026#39; =\u0026gt; UserResource::make($this-\u0026gt;whenLoaded(\u0026#39;user\u0026#39;)), ]; } } انتقل إلى ملف routes/api.php الخاص بك وأضف مسارًا جديدًا. use App\\Models\\Profile; use App\\Http\\Resources\\ProfileResource; --- Route::get(\u0026#39;/profiles\u0026#39;, method () { $profiles = Profile::with([\u0026#39;user\u0026#39;])-\u0026gt;get(); $profilesResource = ProfileResource::collection($profiles); return response()-\u0026gt;json($profilesResource); }); افتح المتصفح وانتقل إلى عنوان URL التالي http://127.0.0.1:8000/api/profiles لترى النتائج التي ستظهر. [ { \u0026#34;id\u0026#34;: 1, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34; } }, { \u0026#34;id\u0026#34;: 2, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34; } }, { \u0026#34;id\u0026#34;: 3, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 3, \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34; } } ] كيفية تحسين استعلامات Eloquent في Laravel؟ # كيفية تحسين استعلامات Eloquent في Laravel؟ عند التعامل مع قاعدة بيانات كبيرة بها الكثير من البيانات ، من المهم مراعاة الأداء. هذا لا يعني فقط الوقت الذي يستغرقه الحصول على البيانات ، ولكن أيضًا عدد الاستعلامات التي يتم تنفيذها لكل صفحة.\nلاختبار أداء تطبيقك ، يمكنك استخدام مكتبة تسمى Laravel Debugbar. سيعرض لك شريط التصحيح جميع الاستعلامات التي يتم تنفيذها على كل صفحة ، بالإضافة إلى الوقت الذي يستغرقه كل استعلام في التنفيذ. يمكن أن تساعدك هذه المعلومات في تحديد معوقات الأداء وتحسين تطبيقك.\nلنقم بتشغيل هذا الأمر. composer require barryvdh/laravel-debugbar --dev تأكد من أن APP_DEBUG=true داخل ملف .env.\nالفرق بين الحالتين كالتالي: $users = User::all(); $users = User::with(\u0026#39;profile\u0026#39;)-\u0026gt;get(); افتح المتصفح وانتقل إلى عنوان URL التالي http://127.0.0.1:8000/users لترى النتائج التي ستظهر في شريط المكتبة. (Lazy Loading) - استرداد البيانات بدون استخدام with. laravel debugbar lazy loading في الجزء السفلي من الصفحة ، سنجد الآن شريطًا لمكتبة Laravel Debugbar. عند النقر فوقه ، سنجد أنه يعمل مع الكثير من البيانات. الشيء الذي يثير اهتمامنا هنا هو عدد استعلامات SQL في هذه الصفحة ، وكما هو موضح ، فهي 4 استعلامات.\nوقمنا باسترجاع 3 مستخدمين فقط ، تخيلوا معي إذا كان هناك عشرات الآلاف أو الملايين من المستخدمين داخل قاعدة البيانات هذه ، فإن وقت تحميل هذه الصفحة سيكون بطيئًا للغاية بسبب العدد الهائل من الإستعلامات.\nهذه تسمى مشكلة N+1 في Laravel. يحدث هذا بسبب lazy loading relationships ، مما يعني أن البيانات المرتبطة لا يتم تحميلها حتى يتم الاحتياج إليها بالفعل. في هذه الحالة ، نتكاسل في تحميل علاقة الملف الشخصى لكل مستخدم. هذا يعني أننا نجري استعلامًا منفصلاً لكل مستخدم للحصول على ملفه الضخصى.\nإذا كان هناك 1000 مستخدم ، فسنقدم 1001 استعلامًا: استعلام واحد لجذب المستخدمين ، و 1000 استعلام للحصول على ملفهم الشخصى. يعد هذا مضيعة لموارد الخادم ويمكن أن يجعل تطبيقك بطيئًا.\nلحل مشكلة N+1 ، يمكنك تحميل العلاقات eager loading. هذا يعني أنك ستقوم بتحميل البيانات المرتبطة عند استرداد البيانات لأول مرة. في هذه الحالة ، يمكنك استخدام with() method لتحميل علاقة الملف الشخصى. سيؤدي هذا إلى إجراء استعلام واحد فقط للحصول على المستخدمين وملفاتهم الشخصية.\nيمكن أن يؤدي التحميل الجاد إلى تحسين أداء تطبيقك عن طريق تقليل عدد الاستعلامات. إنها ممارسة جيدة يجب تحميل العلاقات eager loading كلما أمكن ذلك.\n(Eager Loading) - استرداد البيانات بإستخدام with. laravel debugbar eager loading كما ترى ، بإضافة طريقة with () مع اسم العلاقة ، سيتم جلب بيانات كل مستخدم بملف التعريف الخاص به بدون مشكلة N + 1.\nلذلك تم تقليل عدد الاستعلامات من 4 إلى 2 فقط. من الواضح أن هذا سيكون له تأثير إذا كانت قاعدة البيانات هذه متوسطة الحجم أو كبيرة. هذا ما يسمى eager loading.\nيمكنك العثور على repo لهذه السلسلة على github هنا: laravelspa/laravel-relations PHP 0 0 ","date":"13 أغسطس 2023","permalink":"/ar/blog/how-can-you-retrieve-data-from-a-one-to-one-relationship-in-laravel-in-arabic/","section":"Blogs","summary":"كيف يمكنك استرداد البيانات من علاقة one to one في Laravel؟ لقد رأينا كيف يتم حفظ البيانات بعدة طرق مختلفة في قاعدة البيانات باستخدام علاقة one to one في Laravel.","title":"كيفية استرداد البيانات فى علاقة one to one في Laravel؟"},{"content":" كيفية إدراج البيانات في علاقة واحد لواحد في قاعدة البيانات؟ بعد أن أنشأنا علاقة واحد لواحد بين جدول المستخدمين وجدول ملفات تعريف ، وأضفنا hasOne() method إلى نموذج User ، و method belongsTo() إلى نموذج Profile ، حان الوقت لمعرفة كيفية حفظ البيانات في قاعدة البيانات عندما نستخدم هذه العلاقة. وما هي الأساليب المتبعة في ذلك؟\nتنقسم هذه الطرق إلى ثلاث طرق رئيسية:\nبدون استخدام method profile. باستخدام method profile. باستخدام العلاقة العكسية method user. تعتمد أفضل طريقة للاستخدام على الاحتياجات المحددة للتطبيق الخاص بك. إذا كنت تحتاج فقط إلى حفظ ملف التعريف المرتبط بالمستخدم ، فإن الطريقة الأولى هي الخيار الأبسط. إذا كنت بحاجة إلى الحصول على ملف التعريف أو تحديثه أو حذفه ، فإن الطريقة الثانية هي خيار أفضل. إذا كنت بحاجة إلى الحصول على المستخدم أو تحديثه أو حذفه ، فإن الطريقة الثالثة هي الخيار الأفضل.\n1. بدون استخدام method profile. # نذهب أولاً إلى ملف routes/web.php ونضيف مسارًا جديدًا حتى نتمكن من اختبار هذه الطريقة. use App\\Models\\Profile; use App\\Models\\User; --- Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;John Doe\u0026#39;]); Profile::create([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;John\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;08-11-1991\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); نقوم بفتح المتصفح وانانتقال إلى هذا الرابط http://127.0.0.1:8000/one-to-one. لنجد أنه تم إنشاء المستخدم بنجاح. { \u0026#34;username\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Doe\u0026#34; } 2. باستخدام method profile. # نذهب أولاً إلى ملف routes/web.php ونقوم بتعديل هذا المسار. Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Tom Cruz\u0026#39;]); $user-\u0026gt;profile()-\u0026gt;create([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Tom\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Cruz\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-02-2000\u0026#39; ]); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $user-\u0026gt;profile-\u0026gt;lastname, ]); }); نقوم بفتح المتصفح وانانتقال إلى هذا الرابط http://127.0.0.1:8000/one-to-one. لنجد أنه تم إنشاء المستخدم بنجاح. { \u0026#34;username\u0026#34;: \u0026#34;Tom Cruz\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Cruz\u0026#34; } 3. باستخدام العلاقة العكسية method user. # نذهب أولاً إلى ملف routes/web.php ونقوم بتعديل هذا المسار. Route::get(\u0026#39;/one-to-one\u0026#39;, method () { $user = User::create([\u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Adam Smith\u0026#39;]); $profile = new Profile([ \u0026#39;firstname\u0026#39; =\u0026gt; \u0026#39;Adam\u0026#39;, \u0026#39;lastname\u0026#39; =\u0026gt; \u0026#39;Smith\u0026#39;, \u0026#39;birthday\u0026#39; =\u0026gt; \u0026#39;01-01-1999\u0026#39; ]); $profile-\u0026gt;user()-\u0026gt;associate($user)-\u0026gt;save(); return response()-\u0026gt;json([ \u0026#39;username\u0026#39; =\u0026gt; $profile-\u0026gt;user-\u0026gt;username, \u0026#39;firstname\u0026#39; =\u0026gt; $profile-\u0026gt;firstname, \u0026#39;lastname\u0026#39; =\u0026gt; $profile-\u0026gt;lastname, ]); }); نقوم بفتح المتصفح وانانتقال إلى هذا الرابط http://127.0.0.1:8000/one-to-one. لنجد أنه تم إنشاء المستخدم بنجاح. { \u0026#34;username\u0026#34;: \u0026#34;Adam Smith\u0026#34;, \u0026#34;firstname\u0026#34;: \u0026#34;Adam\u0026#34;, \u0026#34;lastname\u0026#34;: \u0026#34;Smith\u0026#34; } يمكنك العثور على repo لهذه السلسلة على github هنا: laravelspa/laravel-relations PHP 0 0 ","date":"12 أغسطس 2023","permalink":"/ar/blog/how-to-insert-data-in-one-to-one-relationship-in-database-in-arabic/","section":"Blogs","summary":"كيفية إدراج البيانات في علاقة واحد لواحد في قاعدة البيانات؟ بعد أن أنشأنا علاقة واحد لواحد بين جدول المستخدمين وجدول ملفات تعريف ، وأضفنا hasOne() method إلى نموذج User ، و method belongsTo() إلى نموذج Profile ، حان الوقت لمعرفة كيفية حفظ البيانات في قاعدة البيانات عندما نستخدم هذه العلاقة.","title":"كيفية إدراج البيانات في علاقة واحد لواحد في قاعدة البيانات؟"},{"content":" كيف تُنشئ علاقة One-To-One في Laravel؟ علاقات واحد لواحد هي أبسط أنواع العلاقات التي يقدمها Laravel. يتم من خلالها ربط جدولين بحيث يرتبط صف واحد في الجدول الأول بصف واحد فقط في الجدول الآخر ، أو نفس الجدول.\nlaravel one to one relationship لرؤية هذا في العمل ، سنبدأ بإنشاء نظام إدارة المحتوى.\nلرؤية هذا عمليًا ، لنبدأ بإنشاء نظام إدارة المحتوى. لنفترض أن لكل مستخدم ملفه الشخصي الفردي. في بعض الحالات ، يمكنك تخزين جميع معلومات الملف الشخصي في جدول المستخدمون. ومع ذلك ، هذا ليس مثاليًا.\nفي مثالنا ، نريد إنشاء جدول منفصل للملفات الشخصية. سيسمح لنا ذلك بنقل ملف تعريف من مستخدم إلى آخر بسهولة إذا احتجنا إلى ذلك.\nافتراضيًا ، يوجد جدول Users في Laravel. الأعمدة التي يحتوي عليها لا تهم في هذا المثال.\nلنفترض أن لدينا جدول مستخدمين بالأعمدة التالية: Schema::create(\u0026#39;users\u0026#39;, method (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;username\u0026#39;); $table-\u0026gt;string(\u0026#39;email\u0026#39;)-\u0026gt;unique(); $table-\u0026gt;timestamps(); }); نقوم بتعديل ملف User.php. protected $fillable = [\u0026#39;username\u0026#39;]; نقوم بإنشاء Profile Model مع الجدول الخاص به. php artisan make:model Profile -m في علاقة *** \u0026ldquo;واحد لواحد\u0026rdquo; *** ، لدينا حرية اختيار إحدى هاتين الطريقتين لتأسيس العلاقة:\nأضف user_id في جدول profiles. أضف profile_id في جدول users. عادة ، يتم إضافة العمود الذي يربط بين الجدولين إلى الجدول الثاني. لذلك سنقوم بإضافته إلى جدول الملفات الشخصية على النحو التالي:\nSchema::create(\u0026#39;profiles\u0026#39;, method (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;firstname\u0026#39;); $table-\u0026gt;string(\u0026#39;lastname\u0026#39;); $table-\u0026gt;string(\u0026#39;birthday\u0026#39;); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(); $table-\u0026gt;timestamps(); }); نقوم بتحرير ملف Profile.php. protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;firstname\u0026#39;, \u0026#39;lastname\u0026#39;, \u0026#39;birthday\u0026#39; ]; لنقم بتشغيل هذا الأمر لتحديث قاعدة البيانات. php artisan migrate دعنا ننتقل إلى ملف User.php لتحديد العلاقة. public method profile() { return $this-\u0026gt;hasOne(Profile::class); } لنرى كيف تعمل method hasOne(). تُستخدم هذه الطريقة لحفظ id للنموذج ذي الصلة في عمود foreign key للنموذج الأصل.\n$this-\u0026gt;hasOne(Profile::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // localKey =\u0026gt; Primary Key In Parent Table By Default is Id ); دعنا ننتقل إلى ملف Profile.php لتحديد العلاقة العكسية. public method user() { return $this-\u0026gt;belongsTo(User::class); } لنكتشف كيف تعمل belongsTo() method. تُستخدم هذه method لحفظ id للنموذج الأصلي في عمود المفتاح الأساسي للنموذج ذي الصلة.\n$this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // foreignKey By Default Parent Model + Promary Key \u0026#39;id\u0026#39; // OwnerKey By Default Id ); لنفترض أنك تريد تسمية العلاقة بشيء مثل admin ، نحتاج إلى إضافة property foreignKey إلى العلاقة.\npublic method admin() { return $this-\u0026gt;belongsTo(User::class, \u0026#39;user_id\u0026#39; // You must add foreignKey ); } يتم استخدام foreignKey property لتحديد اسم العمود في النموذج الفرعي المستخدم للإشارة إلى النموذج الأصلي.\nإذا لم تقم بإضافة foreignKey property إلى العلاقة عند تغيير اسم العلاقة ، فسترى الخطأ التالي: Attempt to read property X on null يمكنك العثور على repo لهذه السلسلة على github هنا: laravelspa/laravel-relations PHP 0 0 ","date":"11 أغسطس 2023","permalink":"/ar/blog/how-to-create-a-one-to-one-relationship-in-laravel-in-arabic/","section":"Blogs","summary":"كيف تُنشئ علاقة One-To-One في Laravel؟ علاقات واحد لواحد هي أبسط أنواع العلاقات التي يقدمها Laravel. يتم من خلالها ربط جدولين بحيث يرتبط صف واحد في الجدول الأول بصف واحد فقط في الجدول الآخر ، أو نفس الجدول.","title":"كيف إنشاء علاقة One-To-One في Laravel؟"},{"content":"في كثير من الأحيان ، يحتاج المطورون إلى التفاعل مع قواعد البيانات. إذا كنت تستخدم إطار عمل Laravel ، فيجب أن تعرف عن إحدى ميزاته الأكثر أهمية: Eloquent ، مخطط ربط الكائنات (ORM) الذي يجعل هذه العملية بسيطة وسهلة.\nLaravel Eloquent هي واحدة من السمات الرئيسية في إطار عمل Laravel. ويرجع ذلك إلى دعمه الكبير لتعريف العلاقات بين الجداول المختلفة وإنشاؤها وإدارتها. في هذه السلسلة من المقالات ، سأوضح لك كيفية إنشاء واستخدام Laravel Eloquent.\nمن المهم ملاحظة أنه يمكنك البدء في استخدام Eloquent دون أي معرفة مسبقة بالعلاقات.\nlaravel one to one relationship كمبرمج محترف ، من الضروري فهم أنواع العلاقات. ومع ذلك ، يجب أن تسأل نفسك سؤالًا مهمًا: ما هي العلاقات في المقام الأول؟\nما هي العلاقات في قواعد البيانات؟ # ما هي العلاقات في قواعد البيانات؟ عند العمل مع جداول في قاعدة بيانات لها علاقات فيما بينها ، يمكننا وصف هذه العلاقات على أنها روابط بين تلك الجداول. يساعدك هذا في تنظيم البيانات وهيكتلها دون عناء ، مما يسمح بقراءة البيانات ومعالجتها بشكل أسرع.\nما هي أنواع العلاقات الموجودة في Laravel؟ # ما هي أنواع العلاقات الموجودة في Laravel؟ هناك ثلاثة أنواع رئيسية من العلاقات في قواعد البيانات شائعة الاستخدام في الممارسة:\none-to-one (واحد لواحد): تعني علاقة رأس برأس أن سجلًا واحدًا في جدول واحد يمكن أن يكون مرتبطًا بسجل واحد فقط في جدول آخر. على سبيل المثال ، قد يكون لجدول العملاء علاقة رأس برأس بجدول عنوان. هذا يعني أنه يمكن لكل عميل الحصول على عنوان واحد فقط ، ويمكن ربط كل عنوان بعميل واحد فقط.\none-to-many (واحد لكثير): تعني علاقة رأس بأطراف أنه يمكن ربط سجل واحد في جدول واحد بالعديد من السجلات في جدول آخر. على سبيل المثال ، قد يكون لجدول الطلبات علاقة رأس بأطراف بجدول منتج. هذا يعني أنه يمكن أن يحتوي طلب واحد على العديد من المنتجات ، ولكن لا يمكن ربط كل منتج إلا بطلب واحد.\nmany-to-many (كثير إلى كثير): تعني علاقة أطراف بأطراف أن العديد من السجلات في جدول واحد يمكن أن تكون مرتبطة بالعديد من السجلات في جدول آخر. على سبيل المثال ، قد يكون لجدول الطالب علاقة أطراف بأطراف بجدول المقرر الدراسي. هذا يعني أنه يمكن للعديد من الطلاب أخذ العديد من الدورات ، ويمكن للعديد من الطلاب أخذ العديد من الدورات.\nإلى جانب هذه العلاقات ، يقدم Laravel المزيد من العلاقات ، وهي:\nHas Many Through (لديه الكثير من خلال): تسمح لك هذه العلاقة بربط نموذج بنموذج آخر من خلال نموذج ثالث. على سبيل المثال ، قد يحتوي نموذج المستخدم على العديد من خلال العلاقة مع نموذج المشاركة ، حيث يكون النموذج الثالث هو نموذج الفئة. هذا يعني أنه يمكن للمستخدم الحصول على العديد من المشاركات ، حيث تنتمي كل مشاركة إلى فئة معينة.\nPolymorphic Relations (العلاقات متعددة الأشكال): تسمح لك هذه العلاقة بربط نموذج بعدة نماذج أخرى من أنواع مختلفة. على سبيل المثال ، قد يكون لنموذج التعليق علاقة متعددة الأشكال بنموذج ، حيث يمكن أن يكون النموذج منشور مدونة أو منتجًا أو مستخدمًا. هذا يعني أنه يمكن ربط تعليق بأي من هذه الأنواع الثلاثة من النماذج.\nMany-to-many Polymorphic (متعدد الأشكال متعدد الأشكال): هذه العلاقة عبارة عن مزيج من العلاقات متعددة الأشكال والمتعددة الأشكال. يسمح لك بربط نموذج بالعديد من النماذج الأخرى من أنواع مختلفة ، حيث يتم التوسط في العلاقة بواسطة نموذج ثالث. على سبيل المثال ، قد يكون لنموذج المستخدم علاقة متعددة الأشكال متعددة الأشكال مع نموذج ، حيث يكون النموذج الثالث هو نموذج يحتذى به. هذا يعني أنه يمكن أن يكون للمستخدم العديد من الأدوار ، حيث يمكن أن يكون كل دور مستخدمًا أو منتجًا أو منشور مدونة.\nعدد العلاقات التي سنشرحها هو 6 أنواع. سنقوم ببناء نظام بسيط لإدارة المحتوى لشرح كل تلك العلاقات.\nهل أحتاج إلى معرفة محددة بـ Eloquent قبل قراءة هذا؟\nردًا على سؤالك حول ما إذا كنت بحاجة إلى معرفة محددة بـ Eloquent قبل قراءة هذا ، أود أن أقول إنه ليس ضروريًا تمامًا ، ولكنه سيكون مفيدًا. لا تستخدم الأمثلة في المقالة أي طرق أو تقنيات Eloquent معقدة ، ولكن سيكون من المفيد أن يكون لديك فهم أساسي لكيفية عمل Eloquent قبل قراءة المقالة.\nإذا كنت جديدًا على Laravel ، فإنني أوصي بقراءة توثيق Laravel: https://laravel.com/docs/ قبل قراءة هذه المقالة. يوفر التوثيق نظرة عامة جيدة على Eloquent وكيف يعمل.\nبمجرد أن يكون لديك فهم أساسي لـ Eloquent ، يجب أن تكون قادرًا على اتباع الأمثلة الواردة في المقالة دون أي مشاكل. ومع ذلك ، إذا واجهتك مشكلة ، يمكنك دائمًا الرجوع إلى الوثائق للحصول على مزيد من المساعدة.\nفي الأمثلة أدناه ، حاولت أن أشرح كل شيء بأكبر قدر ممكن من الوضوح ، دون استخدام الكثير من أساليب Eloquent الصعبة والتقنيات المعقدة. هذا يعني أن المعرفة المسبقة ليست ضرورية تمامًا. ومع ذلك ، فمن الأفضل دائمًا تعلم الأساسيات أولاً ثم متابعة موضوعات أكثر تعقيدًا مثل العلاقات.\n","date":"10 أغسطس 2023","permalink":"/ar/blog/what-types-of-relationships-are-there-in-laravel-in-arabic/","section":"Blogs","summary":"في كثير من الأحيان ، يحتاج المطورون إلى التفاعل مع قواعد البيانات. إذا كنت تستخدم إطار عمل Laravel ، فيجب أن تعرف عن إحدى ميزاته الأكثر أهمية: Eloquent ، مخطط ربط الكائنات (ORM) الذي يجعل هذه العملية بسيطة وسهلة.","title":"ما هي أنواع العلاقات الموجودة في Laravel؟"},{"content":"","date":"8 مايو 2023","permalink":"/ar/tags/full-stack/","section":"Tags","summary":"","title":"full stack"},{"content":"","date":"8 مايو 2023","permalink":"/ar/tags/spa/","section":"Tags","summary":"","title":"spa"},{"content":"","date":"8 مايو 2023","permalink":"/ar/tags/vue3/","section":"Tags","summary":"","title":"vue3"},{"content":"","date":"8 مايو 2023","permalink":"/ar/categories/vuejs/","section":"Categories","summary":"","title":"Vuejs"},{"content":" عرض المشروع # Laravel 10 Vue 3 ما هو إطار عمل Laravel # Laravel هو إطار عمل لتطبيق ويب ذو بناء مرتب وأنيق. يوفر إطار عمل الويب هيكلًا ونقطة بداية لإنشاء تطبيقك ، مما يسمح لك بالتركيز على إنشاء شيء مذهل بينما تهتم بالتفاصيل. ما هى Vue js! # Vue هو إطار عمل JavaScript لبناء واجهات المستخدم. يعتمد على HTML و CSS و JavaScript. يساعدك على تطوير واجهات المستخدم بكفاءة ، سواء كانت بسيطة أو معقدة. ما هى Vite js! # Vite هي أداة بناء تهدف إلى توفير تجربة تطوير أسرع وأكثر رشاقة لمشاريع الويب الحديثة. وهذه المشاريع تتكون من جزئين رئيسيين:\nخادم مطور يوفر تحسينات غنية بالميزات على وحدات ES الأصلية ، على سبيل المثال استبدال الوحدة النمطية السريعة للغاية (HMR).\nأمر بناء يجمع التعليمات البرمجية الخاصة بك مع Rollup ، مهيأ مسبقًا لإنتاج أصول ثابتة محسّنة للغاية للإنتاج.\nونستنتج من السابق أن أهم شئ بيميز vite هى السرعة فى بداية السيرفر وأيضا عمل bundle لملفات المشروع عند الانتهاء من المشروع. الخطوة الأولى: إنشاء مشروع Laravel جديد # composer create-project laravel/laravel laravel10-vue3 الخطوة الثانية: كيفية تحميل Vue 3 فى مشروع Laravel 10 # cd laravel10-vue3 npm install npm install vue@next vue-loader@next الخطوة الثالثة: تحميل Plugin Vue من Vite # npm i @vitejs/plugin-vue الخطوة الرابعة: قم بتعديل ملف vite.config.js # // vite.config.js import { defineConfig } from \u0026#39;vite\u0026#39;; import laravel from \u0026#39;laravel-vite-plugin\u0026#39;; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; export default defineConfig({ plugins: [ vue(), laravel({ input: [\u0026#39;resources/css/app.css\u0026#39;, \u0026#39;resources/js/app.js\u0026#39;], refresh: true, }), ], }); الخطوة الخامسة: قم بتعديل ملف app.js داخل مجلد resources/js # import {createApp} from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; createApp(App).mount(\u0026#34;#app\u0026#34;) الخطوة السادسة: قم بإنشاء ملف app.blade.php داخل مجلد resources/views # تأكد من إضافة ملف css و javascript كما هو موضح وأيضا div ب id=app \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ str_replace(\u0026#39;_\u0026#39;, \u0026#39;-\u0026#39;, app()-\u0026gt;getLocale()) }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;ًApplication\u0026lt;/title\u0026gt; @vite(\u0026#39;resources/css/app.css\u0026#39;) \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; @vite(\u0026#39;resources/js/app.js\u0026#39;) \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; الخطوة السابعة: قم بإنشاء ملف App.vue داخل مجلد resources/js # \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt; How To Install Vue 3 in Laravel 10 : Laravel SPA :) \u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; الخطوة الثامنة: قم بتعديل ملف web.php داخل مجلد routes # \u0026lt;?php use Illuminate\\Support\\Facades\\Route; Route::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;app\u0026#39;); }) -\u0026gt;name(\u0026#39;application\u0026#39;); الخطوة التاسعة: قم بتشغيل السيرفر المحلى # php artisan serve الخطوة العاشرة: فم بتشغيل السيرفر المحلى Node # npm run dev قم بالذهاب الى http://127.0.0.1:8000/ ستجد ما يلى Laravel 10 Vue 3 ستجد repo الخاصة بهذا المشروع على github هنا laravelspa/laravel10-vue3 PHP 3 1 ","date":"8 مايو 2023","permalink":"/ar/blog/how-to-install-vue3-in-laravel10-with-vite-in-arabic/","section":"Blogs","summary":"عرض المشروع # Laravel 10 Vue 3 ما هو إطار عمل Laravel # Laravel هو إطار عمل لتطبيق ويب ذو بناء مرتب وأنيق. يوفر إطار عمل الويب هيكلًا ونقطة بداية لإنشاء تطبيقك ، مما يسمح لك بالتركيز على إنشاء شيء مذهل بينما تهتم بالتفاصيل.","title":"كيفية تحميل Vue 3 داخل مشروع Laravel 10 بإستخدام Vite"},{"content":"","date":"1 يناير 0001","permalink":"/ar/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"شكرا لك على قراءة مدونتي!\nقم بالتسجيل في نشرتنا عبر البريد الإلكتروني أو يمكنك إستخدام RSS feed لتلقي تنبيهات حول منشورات المدونة الجديدة.\n","date":"1 يناير 0001","permalink":"/ar/subscribe/","section":"Laravel SPA","summary":"شكرا لك على قراءة مدونتي!\nقم بالتسجيل في نشرتنا عبر البريد الإلكتروني أو يمكنك إستخدام RSS feed لتلقي تنبيهات حول منشورات المدونة الجديدة.","title":"تابعنا"},{"content":" كن على تواصل ","date":"1 يناير 0001","permalink":"/ar/contact-us/","section":"Laravel SPA","summary":" كن على تواصل ","title":"تواصل معنا"},{"content":" سياسة خصوصية المدونة # قمنا بتصميم هذه المدونة للاسراء المحتوي العربي من خلال توفير موضوعات ومقالات هامة ومفيدة في تحضض المدونة وقد تم إعداد سياسة الخصوصية لمساعدتكم وحماية بياناتكم عند زيارتكم لمدونتنا علي شبكة الأنترنت وسيتم فقط استخدام البيانات التي تقدموها لنا بمعرفتكم ومحض إرادتكم ولا نجمع أي بيانات أخري عند تصفحكم مدونتنا الإلكترونية .\nعنوان بروتوكول شبكة الإنترنت (IP) # في أي وقت تزور فيه أي موقع انترنت بما فيها هذا الموقع , سيقوم السيرفر المضيف بتسجيل عنوان بروتوكول شبكة الإنترنت (IP) الخاص بك , تاريخ ووقت الزيارة ونوع متصفح الإنترنت الذي تستخدمه والعنوان URL الخاص بأي موقع من مواقع الإنترنت التي تقوم بإحالتك إلى الى هذا الموقع على الشبكة.\nالروابط بالمواقع الأخرى على شبكة الإنترنت # قد يشتمل موقعنا على روابط بالمواقع الأخرى على شبكة الإنترنت. او إعلانات من مواقع أخرى مثل Google AdSense ولا نعتبر مسئولين عن أساليب تجميع البيانات من قبل تلك المواقع, يمكنك الاطلاع على سياسات السرية والمحتويات الخاصة بتلك المواقع التي يتم الدخول إليها من خلال أي رابط ضمن هذا الموقع.\nنحن قد نستعين بشركات إعلان لأطراف ثالثة لعرض الإعلانات عندما تزور موقعنا على الويب. يحق لهذه الشركات أن تستخدم معلومات حول زياراتك لهذا الموقع ولمواقع الويب الأخرى (باستثناء الاسم أو العنوان أو عنوان البريد الإلكتروني أو رقم الهاتف)، وذلك من أجل تقديم إعلانات حول البضائع والخدمات التي تهمك. إذا كنت ترغب في مزيد من المعلومات حول هذا الأمر وكذلك إذا كنت تريد معرفة الاختيارات المتاحة لك لمنع استخدام هذه المعلومات من قِبل هذه الشركات ، فالرجاء النقر هنا.\nإفشاء المعلومات # سنحافظ في كافة الأوقات على خصوصية وسرية كافة البيانات الشخصية التي نتحصل عليها. ولن يتم إفشاء هذه المعلومات إلا إذا كان ذلك مطلوباً بموجب أي قانون أو عندما نعتقد بحسن نية أن مثل هذا الإجراء سيكون مطلوباً أو مرغوباً فيه للتمشي مع القانون , أو للدفاع عن أو حماية حقوق الملكية الخاصة بهذا الموقع أو الجهات المستفيدة منه.\nالبيانات اللازمة لتنفيذ المعاملات المطلوبة من قبلك # عندما نحتاج إلى أية بيانات خاصة بك , فإننا سنطلب منك تقديمها بمحض إرادتك. حيث ستساعدنا هذه المعلومات في الاتصال بك وتنفيذ طلباتك حيثما كان ذلك ممكنناً. لن يتم اطلاقاً بيع البيانات المقدمة من قبلك إلى أي طرف ثالث بغرض تسويقها لمصلحته الخاصة دون الحصول على موافقتك المسبقة والمكتوبة ما لم يتم ذلك على أساس أنها ضمن بيانات جماعية تستخدم للأغراض الإحصائية والأبحاث دون اشتمالها على أية بيانات من الممكن استخدامها للتعريف بك.\nعند الاتصال بنا # سيتم التعامل مع كافة البيانات المقدمة من قبلك على أساس أنها سرية . تتطلب النماذج التي يتم تقديمها مباشرة على الشبكة تقديم البيانات التي ستساعدنا في تحسين موقعنا. سيتم استخدام البيانات التي يتم تقديمها من قبلك في الرد على كافة استفساراتك , ملاحظاتك , أو طلباتك من قبل هذا الموقع أو أيا من المواقع التابعة له.\nإفشاء المعلومات لأي طرف ثالث # لن نقوم ببيع , المتاجرة , تأجير , أو إفشاء أية معلومات لمصلحة أي طرف ثالث خارج هذا الموقع, أو المواقع التابعة له. وسيتم الكشف عن المعلومات فقط في حالة صدور أمر بذلك من قبل أي سلطة قضائية أو تنظيمية.\nالاتصال بنا # يمكنكم الاتصال بنا عند الحاجة من خلال الضغط على رابط اتصل بنا المتوفر في موقعنا أو مراسلتنا عبر صفحة الفيس بوك.\n","date":"1 يناير 0001","permalink":"/ar/privacy-policy/","section":"Laravel SPA","summary":"سياسة خصوصية المدونة # قمنا بتصميم هذه المدونة للاسراء المحتوي العربي من خلال توفير موضوعات ومقالات هامة ومفيدة في تحضض المدونة وقد تم إعداد سياسة الخصوصية لمساعدتكم وحماية بياناتكم عند زيارتكم لمدونتنا علي شبكة الأنترنت وسيتم فقط استخدام البيانات التي تقدموها لنا بمعرفتكم ومحض إرادتكم ولا نجمع أي بيانات أخري عند تصفحكم مدونتنا الإلكترونية .","title":"سياسة الخصوصية"},{"content":"شروط الاستخدام\nباستخدامك لهذه المدونة، بأي وسيلة كانت، فأنت تقر بأنك قد قرأت هذه الاتفاقية وفهمتها و بأنك موافق علي ما ورد فيها.\n1- توفر المدونة إمكانية التعليق علي المحتوي المنشور فيها، و ويحق لك كما لكل المستخدمين المشاركة في التعليقات، علي الا تقوم بنشر أي محتوي يمكن ان يكون ضارا، غير مشروع، تشهيري، مخالف، مسيء، محرض، مضايق او ما شابه ذلك.\n2- أنت وحدك المسؤول عن التعليقات التي تشارك بها ولا تتحمل المدونة أي مسؤولية.\n3 - حقوق الملكية الفكرية للتعليقات تبقي مسجلة لك، لكن يحق لصاحب المدونة إعادة استخدام التعليقات في أي نشاط متعلق بالمدونة دون الحاجة الي طلب اذن مسبق من صاحب التعليق، بشرط ان يقوم بذكر اسم صاحب التعليق ولا يعدل علي التعليق يشكل يؤدي الي التحريف في معناه.\n4- للتعليق في المدونة يفضل ذكر اسمك الشخصي، يمكنك استخدام اسم مستعار، لكن لا يسمح ابداً بانتحال اسم أي شخص أو هيئة.\n5- يفضل ذكر بريدك الاليكتروني الحقيقي عند الاتصال بنا او التواصل معنا، المدونة تلتزم بعدم استخدام هذا البريد في أي نشاط سوي المراسلات الشخصية، وتلتزم بألا تسلم بريدك الي أي طرف ثالت دون اذن مسبق منك.\n6- يجب عليك ألا تعدل أو تغير في مواضيع المدونة أو استخدامها بطرق غير مشروعة بأي طرق يمكن ان تضر أو تعطل المدونة.\n7- لا يحق لك نقل محتوى المدنة من مواضيع و شروحات و فيديوهات إلى موقعك او مدونتك بدون ذكر المصدر و هي \u0026quot; مدونة Laravel SPA \u0026quot; مع رابط مباشر يؤدي إلى الموضوع الأصلي الذي تم نقله.\n8- قد تتغير هذه الاتفاقية من فترة لأخري بما نراه مناسباً لهدف المدونة، لذا أرجو منك مراجعتها والتقيد بما فيها.\n","date":"1 يناير 0001","permalink":"/ar/terms-and-conditions/","section":"Laravel SPA","summary":"شروط الاستخدام\nباستخدامك لهذه المدونة، بأي وسيلة كانت، فأنت تقر بأنك قد قرأت هذه الاتفاقية وفهمتها و بأنك موافق علي ما ورد فيها.\n1- توفر المدونة إمكانية التعليق علي المحتوي المنشور فيها، و ويحق لك كما لكل المستخدمين المشاركة في التعليقات، علي الا تقوم بنشر أي محتوي يمكن ان يكون ضارا، غير مشروع، تشهيري، مخالف، مسيء، محرض، مضايق او ما شابه ذلك.","title":"شروط الإستخدام"},{"content":"مرحبا انا محمود عادل.\nمرحبًا بك في Laravel SPA: موطن البرامج التعليمية ومقاطع الفيديو والنصائح حول إطار العمل المفضل لدينا Laravel. بدأت في عام 2023 كمدونة شخصية صغيرة ، وسوف تنمو لتصبح مركزًا للمعلومات المفيدة لجميع المستويات ان شاء الله.\nأدير أيضًا قناة على YouTube تحمل نفس اسم Laravel SPA.\nيمكنك متابعة أحدث دروس Laravel التعليمية على Twitter أو عن طريق الاشتراك في النشرة الإخبارية الأسبوعية.\nإذا كنت ترغب في التواصل ، أرسل بريدًا إلكترونيًا إلى dev.mahmoud.adel@gmail.com\n","date":"1 يناير 0001","permalink":"/ar/about-us/","section":"Laravel SPA","summary":"مرحبا انا محمود عادل.\nمرحبًا بك في Laravel SPA: موطن البرامج التعليمية ومقاطع الفيديو والنصائح حول إطار العمل المفضل لدينا Laravel. بدأت في عام 2023 كمدونة شخصية صغيرة ، وسوف تنمو لتصبح مركزًا للمعلومات المفيدة لجميع المستويات ان شاء الله.","title":"من نحن"}]